/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.40
 * Generated at: 2022-06-08 02:11:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.egovframework.example.hjb;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class map2_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/Users/EGIS/eclipse-workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/test/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1612850416000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("\thref=\"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.5.0/css/ol.css\"\r\n");
      out.write("\ttype=\"text/css\">\r\n");
      out.write("<script\r\n");
      out.write("\tsrc=\"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.5.0/build/ol.js\"></script>\r\n");
      out.write("<script\r\n");
      out.write("\tsrc=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\r\n");
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("#map {\r\n");
      out.write("\twidth: 50%;\r\n");
      out.write("\theight: 400px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>홍정범</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\t<div id=\"map\" class=\"map\"></div>\r\n");
      out.write("\t\t<div id=\"map_mode\">\r\n");
      out.write("\t\t\t<button type=\"button\" onclick=\"javascript:addInteraction();\">거리재기</button>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div id=\"mouseCoordinate\"></div>\r\n");
      out.write("\t\t<span>\r\n");
      out.write("\t\t\t<button type=\"button\" onclick=\"javascript:marker();\" name=\"addpin\">마커찍기</button>\r\n");
      out.write("\t\t</span>\r\n");
      out.write("\t\t<div>\r\n");
      out.write("\t\t\t<label><input type=\"checkbox\" id=\"color\" value=\"blue\"\r\n");
      out.write("\t\t\t\tchecked=\"on\">BLUE</label> <label><input type=\"checkbox\"\r\n");
      out.write("\t\t\t\tid=\"color\" value=\"red\">RED</label> <label><input\r\n");
      out.write("\t\t\t\ttype=\"checkbox\" id=\"color\" value=\"green\">GREEN</label>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\t\t\t\t<!--div>\r\n");
      out.write("\t\t\t\t<p>\r\n");
      out.write("\t\t\t\t\t<select id=\"select_option\">\r\n");
      out.write("\t\t\t\t\t\t<option>선택</option>\r\n");
      out.write("\t\t\t\t\t\t<option value='marker'>마커</option>\r\n");
      out.write("\t\t\t\t\t\t<option value='line'>거리재기</option>\r\n");
      out.write("\t\t\t\t\t\t<option value='LT_C_UQ113'>?</option>\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t</p>\r\n");
      out.write("\t\t\t\t</div-->\r\n");
      out.write("\r\n");
      out.write("\t<script>\r\n");
      out.write("\t//예제\r\n");
      out.write("\tvar sketch; //라인스트링 이벤트 시 geometry객체를 담을 변수\r\n");
      out.write("\tvar measureTooltipElement;//draw 이벤트가 진행 중일 때 담을 거리 값 element\r\n");
      out.write("\tvar measureTooltip; //툴팁 위치\r\n");
      out.write("\t\t//브이월드 타일레이어 url 설정\r\n");
      out.write("\r\n");
      out.write("\t\tvar source = new ol.source.XYZ({\r\n");
      out.write("\t\t\turl : 'https://xdworld.vworld.kr/2d/Base/service/{z}/{x}/{y}.png'\r\n");
      out.write("\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t//타일레이어 생성하기\r\n");
      out.write("\t\tvar viewLayer = new ol.layer.Tile({\r\n");
      out.write("\t\t\tsource : source\r\n");
      out.write("\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t/*overviewmap 생성하기\t\r\n");
      out.write("\t\tvar overViewMapCtrl = new ol.control.OverviewMap({\r\n");
      out.write("\t\t    layers: [\r\n");
      out.write("\t\t      new ol.layer.Tile({\r\n");
      out.write("\t\t        source: source,\r\n");
      out.write("\t\t      })],\r\n");
      out.write("\t\t    collapsed: false,\r\n");
      out.write("\t\t});*/\r\n");
      out.write("\t\t//마우스좌표\r\n");
      out.write("\t\tvar mouseControlCoordinate = new ol.control.MousePosition({\r\n");
      out.write("\t\t\tcoordinateFormat : new ol.coordinate.createStringXY(4),\r\n");
      out.write("\t\t\tprojection : 'EPSG:4326',//좌표계 설정\r\n");
      out.write("\t\t\tclassName : 'mposition', //css 클래스 이름\r\n");
      out.write("\t\t\ttarget : document.getElementById('mouseCoordinate'),//좌표를 뿌릴 element\r\n");
      out.write("\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\tvar view = new ol.View({\r\n");
      out.write("\t\t\tcenter : [ 14248656.389982047, 4331624.063626864 ],\r\n");
      out.write("\t\t\tzoom : 8,\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t//예제\r\n");
      out.write("\t\tvar lineSource = new ol.source.Vector();\r\n");
      out.write("\t\tvar lineVector = new ol.layer.Vector({\r\n");
      out.write("\t\t        source:lineSource\r\n");
      out.write("\t\t})\r\n");
      out.write("\t\t//geoserver 설정\r\n");
      out.write("\t\tvar tileImg = new ol.layer.Tile({\r\n");
      out.write("\t\t\tvisible : true,\r\n");
      out.write("\t\t\tsource : new ol.source.TileWMS({\r\n");
      out.write("\t\t\t\turl : 'http://localhost:8090/geoserver/cite/wms',\r\n");
      out.write("\t\t\t\tparams : {\r\n");
      out.write("\t\t\t\t\t'VERSION' : '1.1.0',\r\n");
      out.write("\t\t\t\t\t'tiled' : true,\r\n");
      out.write("\t\t\t\t\t\"STYLES\" : '',\r\n");
      out.write("\t\t\t\t\t\"LAYERS\" : 'cite:li' // workspace:layer\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t})\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t///지도생성\r\n");
      out.write("\t\tvar mapView = new ol.Map({\r\n");
      out.write("\t\t\ttarget : \"map\", // 지도를 생성할 element 객체의 id 값,\r\n");
      out.write("\t\t\tlayers : [ viewLayer], //생성한 레이어 추가,\r\n");
      out.write("\t\t\tview : view, //view 설정\r\n");
      out.write("\t\t\t// controls: ol.control.defaults().extend([overViewMapCtrl]), // 맵 오버레이\r\n");
      out.write("\t\t\tcontrols : new ol.control.defaults()\r\n");
      out.write("\t\t\t\t\t.extend([ mouseControlCoordinate ])\r\n");
      out.write("\t\t//마우스 좌표\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tfunction addInteraction() {\r\n");
      out.write("\t\t    draw = new ol.interaction.Draw({\r\n");
      out.write("\t\t        source: lineSource,\r\n");
      out.write("\t\t        type: 'LineString',\r\n");
      out.write("\t\t        style: new ol.style.Style({\r\n");
      out.write("\t\t            fill: new ol.style.Fill({\r\n");
      out.write("\t\t                color: 'rgba(255, 255, 255, 0.2)',\r\n");
      out.write("\t\t            }),\r\n");
      out.write("\t\t            stroke: new ol.style.Stroke({\r\n");
      out.write("\t\t                color: 'rgba(0, 0, 0, 0.5)',\r\n");
      out.write("\t\t                lineDash: [10, 10],\r\n");
      out.write("\t\t                width: 2,\r\n");
      out.write("\t\t            }),\r\n");
      out.write("\t\t            image: new ol.style.Circle({\r\n");
      out.write("\t\t                radius: 5\r\n");
      out.write("\t\t            }),\r\n");
      out.write("\t\t        }),\r\n");
      out.write("\t\t    })\r\n");
      out.write("\t\t    mapView.addInteraction(draw);\r\n");
      out.write("\t\t    createMeasureTooltip();\r\n");
      out.write("\r\n");
      out.write("\t\t    var listener;\r\n");
      out.write("\t\t    draw.on('drawstart', function(evt) {\r\n");
      out.write("\t\t        console.log(evt)\r\n");
      out.write("\t\t        sketch = evt.feature;\r\n");
      out.write("\t\t        //var tooltipCoord = evt.coordinate;\r\n");
      out.write("\r\n");
      out.write("\t\t        listener = sketch.getGeometry().on('change', function(evt) {\r\n");
      out.write("\t\t            var geom = evt.target;\r\n");
      out.write("\t\t            var output = formatLength(geom);\r\n");
      out.write("\t\t            tooltipCoord = geom.getLastCoordinate();\r\n");
      out.write("\r\n");
      out.write("\t\t            measureTooltipElement.innerHTML = output;\r\n");
      out.write("\t\t            measureTooltip.setPosition(tooltipCoord);\r\n");
      out.write("\t\t        })\r\n");
      out.write("\t\t    })\r\n");
      out.write("\r\n");
      out.write("\t\t    draw.on('drawend', function() {\r\n");
      out.write("\t\t        measureTooltipElement.className = 'ol-tooptip ol-tooltip-static';\r\n");
      out.write("\t\t        measureTooltip.setOffset([0, -7]);\r\n");
      out.write("\r\n");
      out.write("\t\t        //unset sketch\r\n");
      out.write("\t\t        sketch = null;\r\n");
      out.write("\t\t        measureTooltipElement = null;\r\n");
      out.write("\t\t        createMeasureTooltip();\r\n");
      out.write("\t\t        new ol.Observable(listener)\r\n");
      out.write("\t\t    })\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tfunction createMeasureTooltip() {\r\n");
      out.write("\t\t    if (measureTooltipElement) {\r\n");
      out.write("\t\t        measureTooltipElement.parentNode.removeChild(measureTooltipElement);\r\n");
      out.write("\t\t    }\r\n");
      out.write("\t\t    measureTooltipElement = document.createElement('div');\r\n");
      out.write("\t\t    measureTooltipElement.className = 'ol-tooltip ol-tooltip-measure';\r\n");
      out.write("\t\t    measureTooltip = new ol.Overlay({\r\n");
      out.write("\t\t        element: measureTooltipElement,\r\n");
      out.write("\t\t        offset: [0, -15],\r\n");
      out.write("\t\t        positioning: 'bottom-center',\r\n");
      out.write("\t\t    });\r\n");
      out.write("\t\t    mapView.addOverlay(measureTooltip);\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\tfunction formatLength(line) {\r\n");
      out.write("\t\t    var length = ol.sphere.getLength(line);\r\n");
      out.write("\t\t    var output;\r\n");
      out.write("\t\t    if (length > 100) {\r\n");
      out.write("\t\t        output = Math.round((length / 1000) * 100) / 100 + ' ' + 'km';\r\n");
      out.write("\t\t    } else {\r\n");
      out.write("\t\t        output = Math.round(length * 100) / 100 + ' ' + 'm';\r\n");
      out.write("\t\t    }\r\n");
      out.write("\r\n");
      out.write("\t\t    return output;\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\t//맵클릭시 포인트생성\r\n");
      out.write("\r\n");
      out.write("\t\tfunction marker() {\r\n");
      out.write("\t\t\tmapView.on('click', function(e) {\r\n");
      out.write("\t\t\t\t//console.log(e.coordinate);\r\n");
      out.write("\t\t\t\tvar x = e.coordinate[0];\r\n");
      out.write("\t\t\t\tvar y = e.coordinate[1];\r\n");
      out.write("\t\t\t\tlet imgLength = $('input:checkbox[id=\"color\"]:checked').length;\r\n");
      out.write("\t\t\t\tlet color = $('input:checkbox[id=\"color\"]:checked').val();\r\n");
      out.write("\r\n");
      out.write("\t\t\t\tif (imgLength != 1) {\r\n");
      out.write("\t\t\t\t\talert(\"색상을 하나만 선택하여주세요\");\r\n");
      out.write("\t\t\t\t\treturn false;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t//point Geometry 객체를 생성한다.\r\n");
      out.write("\t\t\t\tvar point = new ol.geom.Point([ x, y ]);\r\n");
      out.write("\r\n");
      out.write("\t\t\t\tvar pointSourceLayer = new ol.source.Vector({\r\n");
      out.write("\t\t\t\t\tfeatures : [ new ol.Feature(point) ]\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t//레이어 생성할 때 스타일을 지정해준다.\r\n");
      out.write("\t\t\t\tvar pointVectorLayer = new ol.layer.Vector({\r\n");
      out.write("\t\t\t\t\tsource : pointSourceLayer,\r\n");
      out.write("\t\t\t\t\tstyle : new ol.style.Style({\r\n");
      out.write("\t\t\t\t\t\timage : new ol.style.Circle({\r\n");
      out.write("\t\t\t\t\t\t\tradius : 5,\r\n");
      out.write("\t\t\t\t\t\t\tfill : new ol.style.Fill({\r\n");
      out.write("\t\t\t\t\t\t\t\tcolor : color\r\n");
      out.write("\t\t\t\t\t\t\t}),\r\n");
      out.write("\t\t\t\t\t\t})\r\n");
      out.write("\t\t\t\t\t})\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\t\tthis.addLayer(pointVectorLayer);\r\n");
      out.write("\t\t\t})\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t/*\r\n");
      out.write("\t\t$(\"#select_option\").change(function() {\r\n");
      out.write("\t\t\tvar option = $(this).val(); //선택값의 text값\r\n");
      out.write("\t\t\tconsole.log(option);\r\n");
      out.write("\t\t\tif(option == 'marker'){\r\n");
      out.write("\t\t\t\tmapView.on('click', function(e) {\r\n");
      out.write("\t\t\t\t\t//console.log(e.coordinate);\r\n");
      out.write("\t\t\t\t\tvar x = e.coordinate[0];\r\n");
      out.write("\t\t\t\t\tvar y = e.coordinate[1];\r\n");
      out.write("\t\t\t\t\tlet imgLength = $('input:checkbox[id=\"color\"]:checked').length;\r\n");
      out.write("\t\t\t\t\tlet color = $('input:checkbox[id=\"color\"]:checked').val();\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (imgLength != 1) {\r\n");
      out.write("\t\t\t\t\t\talert(\"색상을 하나만 선택하여주세요\");\r\n");
      out.write("\t\t\t\t\t\treturn false;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t//point Geometry 객체를 생성한다.\r\n");
      out.write("\t\t\t\t\tvar point = new ol.geom.Point([ x, y ]);\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tvar pointSourceLayer = new ol.source.Vector({\r\n");
      out.write("\t\t\t\t\t\tfeatures : [ new ol.Feature(point) ]\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t//레이어 생성할 때 스타일을 지정해준다.\r\n");
      out.write("\t\t\t\t\tvar pointVectorLayer = new ol.layer.Vector({\r\n");
      out.write("\t\t\t\t\t\tsource : pointSourceLayer,\r\n");
      out.write("\t\t\t\t\t\tstyle : new ol.style.Style({\r\n");
      out.write("\t\t\t\t\t\t\timage : new ol.style.Circle({\r\n");
      out.write("\t\t\t\t\t\t\t\tradius : 5,\r\n");
      out.write("\t\t\t\t\t\t\t\tfill : new ol.style.Fill({\r\n");
      out.write("\t\t\t\t\t\t\t\t\tcolor : color\r\n");
      out.write("\t\t\t\t\t\t\t\t}),\r\n");
      out.write("\t\t\t\t\t\t\t})\r\n");
      out.write("\t\t\t\t\t\t})\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tthis.addLayer(pointVectorLayer);\r\n");
      out.write("\t\t\t\t})\r\n");
      out.write("\r\n");
      out.write("\t\t\t}else(option == 'line');{\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tdraw = new ol.interaction.Draw({\r\n");
      out.write("\t\t\t        source: lineSource,\r\n");
      out.write("\t\t\t        type: 'LineString',\r\n");
      out.write("\t\t\t        style: new ol.style.Style({\r\n");
      out.write("\t\t\t            fill: new ol.style.Fill({\r\n");
      out.write("\t\t\t                color: 'rgba(255, 255, 255, 0.2)',\r\n");
      out.write("\t\t\t            }),\r\n");
      out.write("\t\t\t            stroke: new ol.style.Stroke({\r\n");
      out.write("\t\t\t                color: 'rgba(0, 0, 0, 0.5)',\r\n");
      out.write("\t\t\t                lineDash: [10, 10],\r\n");
      out.write("\t\t\t                width: 2,\r\n");
      out.write("\t\t\t            }),\r\n");
      out.write("\t\t\t            image: new ol.style.Circle({\r\n");
      out.write("\t\t\t                radius: 5\r\n");
      out.write("\t\t\t            }),\r\n");
      out.write("\t\t\t        }),\r\n");
      out.write("\t\t\t    })\r\n");
      out.write("\t\t\t    mapView.addInteraction(draw);\r\n");
      out.write("\t\t\t    createMeasureTooltip();\r\n");
      out.write("\r\n");
      out.write("\t\t\t    var listener;\r\n");
      out.write("\t\t\t    draw.on('drawstart', function(evt) {\r\n");
      out.write("\t\t\t        console.log(evt)\r\n");
      out.write("\t\t\t        sketch = evt.feature;\r\n");
      out.write("\t\t\t        //var tooltipCoord = evt.coordinate;\r\n");
      out.write("\r\n");
      out.write("\t\t\t        listener = sketch.getGeometry().on('change', function(evt) {\r\n");
      out.write("\t\t\t            var geom = evt.target;\r\n");
      out.write("\t\t\t            var output = formatLength(geom);\r\n");
      out.write("\t\t\t            tooltipCoord = geom.getLastCoordinate();\r\n");
      out.write("\r\n");
      out.write("\t\t\t            measureTooltipElement.innerHTML = output;\r\n");
      out.write("\t\t\t            measureTooltip.setPosition(tooltipCoord);\r\n");
      out.write("\t\t\t        })\r\n");
      out.write("\t\t\t    })\r\n");
      out.write("\r\n");
      out.write("\t\t\t    draw.on('drawend', function() {\r\n");
      out.write("\t\t\t        measureTooltipElement.className = 'ol-tooptip ol-tooltip-static';\r\n");
      out.write("\t\t\t        measureTooltip.setOffset([0, -7]);\r\n");
      out.write("\r\n");
      out.write("\t\t\t        //unset sketch\r\n");
      out.write("\t\t\t        sketch = null;\r\n");
      out.write("\t\t\t        measureTooltipElement = null;\r\n");
      out.write("\t\t\t        createMeasureTooltip();\r\n");
      out.write("\t\t\t        new ol.Observable(listener)\r\n");
      out.write("\r\n");
      out.write("\t\t\t    })\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t});*/\r\n");
      out.write("\r\n");
      out.write("\t</script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
