/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.40
 * Generated at: 2022-06-09 00:15:03 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.egovframework.example.hjb;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class testmap_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/Users/EGIS/eclipse-workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/test/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1612850416000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<script\r\n");
      out.write("\tsrc=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\"\r\n");
      out.write("\tsrc=\"http://map.vworld.kr/js/vworldMapInit.js.do?version=2.0&apiKey=10036FCE-3940-374C-B2ED-E6FBDF47CFA9\"></script>\r\n");
      out.write("<!-- wms --><script src=\"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.14.1/build/ol.js\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.14.1/css/ol.css\">\r\n");
      out.write("\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.1.1.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("</style>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>ㅅ</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div>\r\n");
      out.write("\t\t<span style=\"text-align: center;\">3. 수행과제<br> - 원하는 위치 클릭\r\n");
      out.write("\t\t\t시 Marker 표시 기능 o<br> -마커 내용 입력 O (원하는사진?)<br> -선택 마커삭제<br>\r\n");
      out.write("\t\t\t-마커 색상?모양? 선택<br> 2) 지오서버를 이용하여 주제도 표출 (지오서버는 로컬에 설치하여 진행)<br>\r\n");
      out.write("\t\t\t- 시도, 시군구, 졸음쉼터<br> - 각 주제도 스타일 편집(색상 및 포인트 이미지)<br> - 지도에\r\n");
      out.write("\t\t\t주제도 표출 후 클릭 시 정보 표출<br> 3) vworld 검색 api 를 이용하여 원하는 장소 검색 후 결과\r\n");
      out.write("\t\t\t보여주고 선택 시 위치 이동\r\n");
      out.write("\t\t</span>\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("\t<div id=\"map\" style=\"width: 100%; height: 640px; left: 0px; top: 0px\"></div>\r\n");
      out.write("\t<div id=\"map_mode\">\r\n");
      out.write("\t\t<button type=\"button\"\r\n");
      out.write("\t\t\tonclick=\"javascript:setMode(vw.ol3.BasemapType.GRAPHIC);\">배경지도</button>\r\n");
      out.write("\t\t<button type=\"button\"\r\n");
      out.write("\t\t\tonclick=\"javascript:setMode(vw.ol3.BasemapType.PHOTO_HYBRID);\">항공사진</button>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<button id=\"mKadd\" onclick=\"javascript:mKadd();\">마커찍기</button>\r\n");
      out.write("\t<button id=\"mKstop\" onclick=\"javascript:mKstop();\">마커정지</button>\r\n");
      out.write("\t<div id=\"mk_option\" style=\"display: none;\">\r\n");
      out.write("\t\t<label><input type=\"checkbox\" id=\"mkImg\"\r\n");
      out.write("\t\t\tvalue=\"");
      if (_jspx_meth_c_005furl_005f0(_jspx_page_context))
        return;
      out.write("\"\r\n");
      out.write("\t\t\tchecked=\"on\"> <img style=\"width: 50px; height: 50px;\"\r\n");
      out.write("\t\t\tsrc=\"");
      if (_jspx_meth_c_005furl_005f1(_jspx_page_context))
        return;
      out.write("\"\r\n");
      out.write("\t\t\talt=\"\" /> </label> <label><input type=\"checkbox\" id=\"mkImg\"\r\n");
      out.write("\t\t\tvalue=\"");
      if (_jspx_meth_c_005furl_005f2(_jspx_page_context))
        return;
      out.write("\">\r\n");
      out.write("\t\t\t<img style=\"width: 50px; height: 50px;\"\r\n");
      out.write("\t\t\tsrc=\"");
      if (_jspx_meth_c_005furl_005f3(_jspx_page_context))
        return;
      out.write("\"\r\n");
      out.write("\t\t\talt=\"\" /> </label>\r\n");
      out.write("\t\t<!-- <button type=\"button\" id=\"mkOption\">마커 옵션 변경</button>  -->\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<p style=\"color: black; font-size: 20px; text-align: center;\">\r\n");
      out.write("\t\t클릭 좌표: <input type=\"text\" name='q' id='mousex' value=\"0\"\r\n");
      out.write("\t\t\tmaxlength=\"20\"\r\n");
      out.write("\t\t\tstyle=\"ime-mode: active; width: 400px; height: 20px; font-size: 20px; background-color: black; color: white;\" />\r\n");
      out.write("\t\t<input type=\"text\" name='q' id='mousey' value=\"0\" maxlength=\"20\"\r\n");
      out.write("\t\t\tstyle=\"ime-mode: active; width: 400px; height: 20px; font-size: 20px; background-color: black; color: white;\" />\r\n");
      out.write("\t</p>\r\n");
      out.write("\r\n");
      out.write("\t<button type=\"button\" onclick=\"javascript:importWMS();\"\r\n");
      out.write("\t\tname=\"importwms\">'리' 지적도</button>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\t////////////////////////지도 불러오기///////////////////////////////////\r\n");
      out.write("\t\tvw.ol3.MapOptions = {\r\n");
      out.write("\t\t\tbasemapType : vw.ol3.BasemapType.GRAPHIC,\r\n");
      out.write("\t\t\tcontrolDensity : vw.ol3.DensityType.EMPTY,\r\n");
      out.write("\t\t\tinteractionDensity : vw.ol3.DensityType.BASIC,\r\n");
      out.write("\t\t\tcontrolsAutoArrange : true,\r\n");
      out.write("\t\t\thomePosition : vw.ol3.CameraPosition,\r\n");
      out.write("\t\t\tinitPosition : vw.ol3.CameraPosition,\r\n");
      out.write("\r\n");
      out.write("\t\t};\r\n");
      out.write("\r\n");
      out.write("\t\tvar map = new vw.ol3.Map(\"map\", vw.ol3.MapOptions);\r\n");
      out.write("\t\t//////////////////////지도 옵션/////////////////////////////////////////\r\n");
      out.write("\t\tfunction setMode(basemapType) {\r\n");
      out.write("\t\t\tmap.setBasemapType(basemapType);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t///////////////////////지도 메뉴바/////////////////////////////////////\r\n");
      out.write("\t\tvar options = {\r\n");
      out.write("\t\t\tmap : map, //메뉴생성할 맵\r\n");
      out.write("\t\t\tsite : vw.ol3.SiteAlignType.TOP_LEFT //메뉴바 위치\r\n");
      out.write("\t\t\t,\r\n");
      out.write("\t\t\tvertical : true,\r\n");
      out.write("\t\t\tcollapsed : false,\r\n");
      out.write("\t\t\tcollapsible : false\r\n");
      out.write("\t\t};\r\n");
      out.write("\r\n");
      out.write("\t\tvar _toolBtnList = [ new vw.ol3.button.Init(map),\r\n");
      out.write("\t\t\t\tnew vw.ol3.button.Distance(map), new vw.ol3.button.Area(map) ];\r\n");
      out.write("\t\tvar toolBar = new vw.ol3.control.Toolbar(options);\r\n");
      out.write("\t\ttoolBar.addToolButtons(_toolBtnList);\r\n");
      out.write("\t\tmap.addControl(toolBar);\r\n");
      out.write("\r\n");
      out.write("\t\t/* 마커옵션\r\n");
      out.write("\t\t$(document).on('click','#mkOption',function(){\r\n");
      out.write("\t\t\t\t$(\"#mk_option\").each(function (a){\t\t\r\n");
      out.write("\t\t\t\t\t$(this).find('input:checked').each(function(){\r\n");
      out.write("\t\t\t\t\t\tlet imgCnt = $('input:checkbox[id=\"mkImg\"]:checked').length;\r\n");
      out.write("\t\t\t\t\t\tvar imgsrc= $(this).val();\r\n");
      out.write("\t\t\t\t\t\tif(imgCnt==1){\r\n");
      out.write("\t\t\t\t\t\t\tconsole.log(imgsrc);\r\n");
      out.write("\t\t\t\t\t\t}else if(imgCnt>1){\r\n");
      out.write("\t\t\t\t\t\t\talert('1개만 선택 해주세요.');\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t */\r\n");
      out.write("\t\t//////////////////////클릭하는 맵 좌표///////////////////////////////////\r\n");
      out.write("\t\tmap.on('click', function(evt) {\r\n");
      out.write("\t\t\t//var lonlat = ol.proj.transform(evt.coordinate, 'EPSG:3857', 'EPSG:4326');\r\n");
      out.write("\t\t\tlet coordinate = evt.coordinate;\r\n");
      out.write("\r\n");
      out.write("\t\t\tdocument.getElementById('mousex').value = coordinate[0]; /* x축 */\r\n");
      out.write("\t\t\tdocument.getElementById('mousey').value = coordinate[1]; /* y축 */\r\n");
      out.write("\t\t})\r\n");
      out.write("\r\n");
      out.write("\t\tvar markerSource = new ol.source.Vector();\r\n");
      out.write("\t\tfunction mKstop() {\r\n");
      out.write("\t\t\talert('마커 종료');\r\n");
      out.write("\t\t\tmap.on();\r\n");
      out.write("\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tfunction mKadd(event) {\r\n");
      out.write("\t\t\t$(\"#mk_option\").show();\r\n");
      out.write("\t\t\talert('마커 옵션을 선택 해주세요');\r\n");
      out.write("\t\t\t//var test = document.getElementById('mousex').value;\r\n");
      out.write("\t\t\t//var testy = document.getElementById('mousey').value;\r\n");
      out.write("\r\n");
      out.write("\t\t\txyv();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tfunction xyv() {\r\n");
      out.write("\t\t\tmap.on('click', function(evt) {\r\n");
      out.write("\t\t\t\t//var lonlat = ol.proj.transform(evt.coordinate, 'EPSG:3857', 'EPSG:4326');\r\n");
      out.write("\t\t\t\tlet xyv = evt.coordinate;\r\n");
      out.write("\t\t\t\taddMarker(xyv);\r\n");
      out.write("\t\t\t})\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t//마커 등록하기 함수\r\n");
      out.write("\t\tfunction addMarker(xyv) {\r\n");
      out.write("\r\n");
      out.write("\t\t\tlet imgLength = $('input:checkbox[id=\"mkImg\"]:checked').length;\r\n");
      out.write("\t\t\tlet imgsrc = $('input:checkbox[id=\"mkImg\"]:checked').val();\r\n");
      out.write("\r\n");
      out.write("\t\t\tif (imgLength != 1) {\r\n");
      out.write("\t\t\t\talert(\"1개만 선택해주세요, 다중선택시 검정마커로 적용됩니다.\");\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t//Point 좌표 등록\r\n");
      out.write("\t\t\tvar point_feature = new ol.Feature({\r\n");
      out.write("\t\t\t\tgeometry : new ol.geom.Point([ xyv[0], xyv[1] ])\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\t//markerSource에 등록한 point를 담는다. addFeature를 이용해서, 여러개의 point를 source에 담는다.\r\n");
      out.write("\t\t\tmarkerSource.addFeature(point_feature);\r\n");
      out.write("\t\t\t//style을 활용해서, point의 style을 변경한다.\r\n");
      out.write("\t\t\tvar markerStyle = new ol.style.Style({\r\n");
      out.write("\t\t\t\timage : new ol.style.Icon({ //마커 이미지\r\n");
      out.write("\t\t\t\t\topacity : 1, //투명도 1=100% \r\n");
      out.write("\t\t\t\t\tscale : 0.060,\r\n");
      out.write("\t\t\t\t\t//marker 이미지, 해당 point를 marker로 변경한다.\r\n");
      out.write("\t\t\t\t\tsrc : imgsrc\r\n");
      out.write("\t\t\t\t//src : \"");
      if (_jspx_meth_c_005furl_005f4(_jspx_page_context))
        return;
      out.write("\"\r\n");
      out.write("\t\t\t\t}),\r\n");
      out.write("\t\t\t\tzindex : 10\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t// 마커 레이어 생성\r\n");
      out.write("\t\t\tmarkerLayer = new ol.layer.Vector({\r\n");
      out.write("\t\t\t\tsource : markerSource, //마커 feacture들\r\n");
      out.write("\t\t\t\tstyle : markerStyle\r\n");
      out.write("\t\t\t//마커 스타일\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\t// 지도에 마커가 그려진 레이어 추가\r\n");
      out.write("\t\t\tmap.addLayer(markerLayer);\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t$(function () {\r\n");
      out.write("\t\t\tvar wmsSource = new ol.source.TileWMS({\r\n");
      out.write("\t\t\t    url: 'http://localhost:8090/geoserver/cite/wms',\r\n");
      out.write("\t\t\t    params: { 'LAYERS': 'cite:li'},\r\n");
      out.write("\t\t\t    serverType: 'geoserver',\r\n");
      out.write("\t\t\t    crossOrigin: 'anonymous'\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\tvar wmsLayer = new ol.layer.Tile({\r\n");
      out.write("\t\t\t    source: wmsSource\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tvar view = new ol.View({\r\n");
      out.write("\t\t\t    center: [0, 0],\r\n");
      out.write("\t\t\t    zoom: 3\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tvar map = new ol.Map({\r\n");
      out.write("\t\t\t    layers: [wmsLayer],\r\n");
      out.write("\t\t\t    target: 'map',\r\n");
      out.write("\t\t\t    view: view\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tmap.on('singleclick', function (evt) {\r\n");
      out.write("\t\t\t    document.getElementById('info').innerHTML = '';\r\n");
      out.write("\t\t\t    \r\n");
      out.write("\t\t\t    var viewResolution = view.getResolution();\r\n");
      out.write("\t\t\t    var url = wmsSource.getGetFeatureInfoUrl(\r\n");
      out.write("\t\t\t        evt.coordinate, viewResolution, 'EPSG:3857',\r\n");
      out.write("\t\t\t        { 'INFO_FORMAT': 'text/html' }\r\n");
      out.write("\t\t\t    );\r\n");
      out.write("\t\t\t    \r\n");
      out.write("\t\t\t    if (url) {\r\n");
      out.write("\t\t\t        document.getElementById('info').innerHTML =\r\n");
      out.write("\t\t\t            '<iframe width=\"100%\" seamless=\"\" src=\"' + url + '\"></iframe>';\r\n");
      out.write("\t\t\t    }\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//\r\n");
      out.write("\r\n");
      out.write("\t\t/*\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\tfunction importWMS() {\r\n");
      out.write("\t\t\thMap = map.ImportWMSLayer('li', {\r\n");
      out.write("\t\t\t\turl : 'http://localhost:8090/geoserver/cite/wms',\r\n");
      out.write("\t\t\t\tlayers : 'cite:li',\r\n");
      out.write("\t\t\t\tversion : '1.1.0',\r\n");
      out.write("\t\t\t\tstyle : '',\r\n");
      out.write("\t\t\t\tcrs : 'EPSG:900913',\r\n");
      out.write("\t\t\t\tsrs : 'ESPG:3857',\r\n");
      out.write("\t\t\t\tformat : 'image/png'\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\talert('test');\r\n");
      out.write("\t\t\tmap.addLayer(hMap);\r\n");
      out.write("\t\t\tconsole.log(hMap);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//addMarker();\r\n");
      out.write("\t\t function mKadd(event){\r\n");
      out.write("\t\t $(\"#mk_option\").show();\r\n");
      out.write("\t\t alert('마커 옵션을 선택 해주세요');\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t var xy = map.on('click', function(evt) {\r\n");
      out.write("\t\t //var lonlat = ol.proj.transform(evt.coordinate, 'EPSG:3857', 'EPSG:4326');\r\n");
      out.write("\t\t let xyv = evt.coordinate;\r\n");
      out.write("\t\t addMarker(xyv);\r\n");
      out.write("\t\t })\t\r\n");
      out.write("\t\t }\r\n");
      out.write("\r\n");
      out.write("\t\t //마커 등록하기 함수\r\n");
      out.write("\t\t function addMarker(xyv) {\t\t\t\r\n");
      out.write("\t\t let imgLength = $('input:checkbox[id=\"mkImg\"]:checked').length;\r\n");
      out.write("\t\t let imgsrc = $('input:checkbox[id=\"mkImg\"]:checked').val();\r\n");
      out.write("\t\t //console.log('imgLength+'+imgLength);\r\n");
      out.write("\t\t if(imgLength != 1){\r\n");
      out.write("\t\t alert(\"1개만 선택해주세요, 다중선택시 검정마커로 적용됩니다.\");\r\n");
      out.write("\t\t }\r\n");
      out.write("\t\t //Point 좌표 등록\r\n");
      out.write("\t\t var point_feature = new ol.Feature({\r\n");
      out.write("\t\t geometry : new ol.geom.Point([ xyv[0], xyv[1] ])\r\n");
      out.write("\t\t });\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t //markerSource에 등록한 point를 담는다. addFeature를 이용해서, 여러개의 point를 source에 담는다.\r\n");
      out.write("\t\t markerSource.addFeature(point_feature);\r\n");
      out.write("\t\t //style을 활용해서, point의 style을 변경한다.\r\n");
      out.write("\t\t var markerStyle = new ol.style.Style({\r\n");
      out.write("\t\t image : new ol.style.Icon({ //마커 이미지\r\n");
      out.write("\t\t opacity : 1, //투명도 1=100% \r\n");
      out.write("\t\t scale:0.065,\r\n");
      out.write("\t\t //marker 이미지, 해당 point를 marker로 변경한다.\r\n");
      out.write("\t\t src : imgsrc\t\t\t\t\t\r\n");
      out.write("\t\t //src : \"");
      if (_jspx_meth_c_005furl_005f5(_jspx_page_context))
        return;
      out.write("\"\r\n");
      out.write("\t\t }),\r\n");
      out.write("\t\t zindex : 10\r\n");
      out.write("\t\t });\r\n");
      out.write("\t\t // 마커 레이어 생성\r\n");
      out.write("\t\t markerLayer = new ol.layer.Vector({\r\n");
      out.write("\t\t source : markerSource, //마커 feacture들\r\n");
      out.write("\t\t style : markerStyle\t\t\t//마커 스타일\r\n");
      out.write("\t\t });\r\n");
      out.write("\r\n");
      out.write("\t\t // 지도에 마커가 그려진 레이어 추가\r\n");
      out.write("\t\t map.addLayer(markerLayer);\r\n");
      out.write("\t\t }\r\n");
      out.write("\t\t */\r\n");
      out.write("\t</script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005furl_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:url
    org.apache.taglibs.standard.tag.rt.core.UrlTag _jspx_th_c_005furl_005f0 = (org.apache.taglibs.standard.tag.rt.core.UrlTag) _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.UrlTag.class);
    boolean _jspx_th_c_005furl_005f0_reused = false;
    try {
      _jspx_th_c_005furl_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005furl_005f0.setParent(null);
      // /WEB-INF/jsp/egovframework/example/hjb/testmap.jsp(43,10) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005furl_005f0.setValue("/images/egovframework/example/marker1.png");
      int _jspx_eval_c_005furl_005f0 = _jspx_th_c_005furl_005f0.doStartTag();
      if (_jspx_th_c_005furl_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f0);
      _jspx_th_c_005furl_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005furl_005f0, _jsp_getInstanceManager(), _jspx_th_c_005furl_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005furl_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:url
    org.apache.taglibs.standard.tag.rt.core.UrlTag _jspx_th_c_005furl_005f1 = (org.apache.taglibs.standard.tag.rt.core.UrlTag) _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.UrlTag.class);
    boolean _jspx_th_c_005furl_005f1_reused = false;
    try {
      _jspx_th_c_005furl_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005furl_005f1.setParent(null);
      // /WEB-INF/jsp/egovframework/example/hjb/testmap.jsp(45,8) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005furl_005f1.setValue("/images/egovframework/example/marker1.png");
      int _jspx_eval_c_005furl_005f1 = _jspx_th_c_005furl_005f1.doStartTag();
      if (_jspx_th_c_005furl_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f1);
      _jspx_th_c_005furl_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005furl_005f1, _jsp_getInstanceManager(), _jspx_th_c_005furl_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005furl_005f2(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:url
    org.apache.taglibs.standard.tag.rt.core.UrlTag _jspx_th_c_005furl_005f2 = (org.apache.taglibs.standard.tag.rt.core.UrlTag) _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.UrlTag.class);
    boolean _jspx_th_c_005furl_005f2_reused = false;
    try {
      _jspx_th_c_005furl_005f2.setPageContext(_jspx_page_context);
      _jspx_th_c_005furl_005f2.setParent(null);
      // /WEB-INF/jsp/egovframework/example/hjb/testmap.jsp(47,10) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005furl_005f2.setValue("/images/egovframework/example/marker3.png");
      int _jspx_eval_c_005furl_005f2 = _jspx_th_c_005furl_005f2.doStartTag();
      if (_jspx_th_c_005furl_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f2);
      _jspx_th_c_005furl_005f2_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005furl_005f2, _jsp_getInstanceManager(), _jspx_th_c_005furl_005f2_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005furl_005f3(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:url
    org.apache.taglibs.standard.tag.rt.core.UrlTag _jspx_th_c_005furl_005f3 = (org.apache.taglibs.standard.tag.rt.core.UrlTag) _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.UrlTag.class);
    boolean _jspx_th_c_005furl_005f3_reused = false;
    try {
      _jspx_th_c_005furl_005f3.setPageContext(_jspx_page_context);
      _jspx_th_c_005furl_005f3.setParent(null);
      // /WEB-INF/jsp/egovframework/example/hjb/testmap.jsp(49,8) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005furl_005f3.setValue("/images/egovframework/example/marker3.png");
      int _jspx_eval_c_005furl_005f3 = _jspx_th_c_005furl_005f3.doStartTag();
      if (_jspx_th_c_005furl_005f3.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f3);
      _jspx_th_c_005furl_005f3_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005furl_005f3, _jsp_getInstanceManager(), _jspx_th_c_005furl_005f3_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005furl_005f4(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:url
    org.apache.taglibs.standard.tag.rt.core.UrlTag _jspx_th_c_005furl_005f4 = (org.apache.taglibs.standard.tag.rt.core.UrlTag) _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.UrlTag.class);
    boolean _jspx_th_c_005furl_005f4_reused = false;
    try {
      _jspx_th_c_005furl_005f4.setPageContext(_jspx_page_context);
      _jspx_th_c_005furl_005f4.setParent(null);
      // /WEB-INF/jsp/egovframework/example/hjb/testmap.jsp(168,13) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005furl_005f4.setValue("/images/egovframework/example/marker1.png");
      int _jspx_eval_c_005furl_005f4 = _jspx_th_c_005furl_005f4.doStartTag();
      if (_jspx_th_c_005furl_005f4.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f4);
      _jspx_th_c_005furl_005f4_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005furl_005f4, _jsp_getInstanceManager(), _jspx_th_c_005furl_005f4_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005furl_005f5(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:url
    org.apache.taglibs.standard.tag.rt.core.UrlTag _jspx_th_c_005furl_005f5 = (org.apache.taglibs.standard.tag.rt.core.UrlTag) _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.UrlTag.class);
    boolean _jspx_th_c_005furl_005f5_reused = false;
    try {
      _jspx_th_c_005furl_005f5.setPageContext(_jspx_page_context);
      _jspx_th_c_005furl_005f5.setParent(null);
      // /WEB-INF/jsp/egovframework/example/hjb/testmap.jsp(276,12) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005furl_005f5.setValue("/images/egovframework/example/marker1.png");
      int _jspx_eval_c_005furl_005f5 = _jspx_th_c_005furl_005f5.doStartTag();
      if (_jspx_th_c_005furl_005f5.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f5);
      _jspx_th_c_005furl_005f5_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005furl_005f5, _jsp_getInstanceManager(), _jspx_th_c_005furl_005f5_reused);
    }
    return false;
  }
}
