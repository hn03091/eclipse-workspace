/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.40
 * Generated at: 2022-06-23 09:11:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.egovframework.example.hjb;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class map220623_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<body>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>최종 과제</title>\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("\thref=\"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.5.0/css/ol.css\"\r\n");
      out.write("\ttype=\"text/css\">\r\n");
      out.write("<script\r\n");
      out.write("\tsrc=\"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.5.0/build/ol.js\"></script>\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-2.2.3.min.js\"></script>\r\n");
      out.write("<script\r\n");
      out.write("\tsrc=\"https://cdn.polyfill.io/v2/polyfill.min.js?features=requestAnimationFrame,Element.prototype.classList,URL\"></script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("#info {\r\n");
      out.write("\topacity: 0.9;\r\n");
      out.write("\tposition: absolute;\r\n");
      out.write("\ttop: 68%;\r\n");
      out.write("\tz-index: 99;\r\n");
      out.write("\tborder-radius: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("table.featureInfo caption {\r\n");
      out.write("\tdisplay: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#popupTest {\r\n");
      out.write("\tposition: absolute;\r\n");
      out.write("\ttop: 30%;\r\n");
      out.write("\tleft: 83%;\r\n");
      out.write("\tborder-radius: 10px;\r\n");
      out.write("\tz-index: 99;\r\n");
      out.write("\tbackground-color: white;\r\n");
      out.write("\theight: 250px;\r\n");
      out.write("\topacity: 0.65;\r\n");
      out.write("\tcolor: black;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".mposition {\r\n");
      out.write("\tbackground-color: green;\r\n");
      out.write("\tcolor: white;\r\n");
      out.write("\topacity: 0.7;\r\n");
      out.write("\ttext-align: center;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".ol-attribution {\r\n");
      out.write("\tdisplay: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/*마우스 툴팁*/\r\n");
      out.write(".tooltip {\r\n");
      out.write("\tposition: relative;\r\n");
      out.write("\tbackground: rgba(0, 0, 0, 0.5);\r\n");
      out.write("\tborder-radius: 4px;\r\n");
      out.write("\tcolor: white;\r\n");
      out.write("\tpadding: 4px 8px;\r\n");
      out.write("\topacity: 0.7;\r\n");
      out.write("\twhite-space: nowrap;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".tooltip-measure {\r\n");
      out.write("\topacity: 1;\r\n");
      out.write("\tfont-weight: bold;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".tooltip-static {\r\n");
      out.write("\tbackground-color: #ffcc33;\r\n");
      out.write("\tcolor: black;\r\n");
      out.write("\tborder: 1px solid white;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".tooltip-measure:before, .tooltip-static:before {\r\n");
      out.write("\tborder-top: 6px solid rgba(0, 0, 0, 0.5);\r\n");
      out.write("\tborder-right: 6px solid transparent;\r\n");
      out.write("\tborder-left: 6px solid transparent;\r\n");
      out.write("\tcontent: \"\";\r\n");
      out.write("\tposition: absolute;\r\n");
      out.write("\tbottom: -6px;\r\n");
      out.write("\tmargin-left: -7px;\r\n");
      out.write("\tleft: 50%;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".tooltip-static:before {\r\n");
      out.write("\tborder-top-color: #ffcc33;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\t<header\r\n");
      out.write("\t\tstyle=\"text-align: center; font-size: 40px; border-bottom: solid;\">신입개발과제\r\n");
      out.write("\t\t홍정범</header>\r\n");
      out.write("\t<div id=\"useMap\" style=\"text-align: center; font-size: 25px;\"></div>\r\n");
      out.write("\t<form id=\"searchForm\" action=\"#\" class=\"form_data\"\r\n");
      out.write("\t\tonsubmit=\"return false;search();\">\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"page\" value=\"1\" /> <input type=\"hidden\"\r\n");
      out.write("\t\t\tname=\"type\" value=\"address\" /> <input type=\"hidden\" name=\"request\"\r\n");
      out.write("\t\t\tvalue=\"search\" /> <input type=\"hidden\" name=\"size\" value=\"100\" /> <input\r\n");
      out.write("\t\t\ttype=\"hidden\" name=\"apiKey\"\r\n");
      out.write("\t\t\tvalue=\"CEB52025-E065-364C-9DBA-44880E3B02B8\" /> <input type=\"hidden\"\r\n");
      out.write("\t\t\tname=\"domain\" value=\"http://localhost:8080\" /> <input type=\"hidden\"\r\n");
      out.write("\t\t\tname=\"crs\" value=\"EPSG:3857\" />\r\n");
      out.write("\t\t<div>\r\n");
      out.write("\t\t\t<input type=\"text\" id=\"searchValue\" name=\"query\"\r\n");
      out.write("\t\t\t\tvalue=\"서울시 은평구 진관1로 77-8\" style=\"width: 300px;\" /> <a\r\n");
      out.write("\t\t\t\thref=\"javascript:search();\">검색</a>\r\n");
      out.write("\t\t\t<!--input type=\"checkbox\" id=\"onoff\" />WMS ON/OFF-->\r\n");
      out.write("\t\t\t<select name=\"category\">\r\n");
      out.write("\t\t\t\t<option value=\"road\">도로명</option>\r\n");
      out.write("\t\t\t\t<option value=\"parcel\">지번</option>\r\n");
      out.write("\t\t\t</select>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</form>\r\n");
      out.write("\t<label><input type=\"checkbox\" id=\"mkImg\"\r\n");
      out.write("\t\tvalue=\"http://map.vworld.kr/images/ol3/marker_blue.png\" checked=\"on\">\r\n");
      out.write("\t\t<img src=\"http://map.vworld.kr/images/ol3/marker_blue.png\" /> <input\r\n");
      out.write("\t\ttype=\"checkbox\" id=\"mkImg\"\r\n");
      out.write("\t\tvalue=\"http://map.vworld.kr/images/ol3/marker.png\"> <img\r\n");
      out.write("\t\tsrc=\"http://map.vworld.kr/images/ol3/marker.png\" /> <input\r\n");
      out.write("\t\ttype=\"checkbox\" id=\"mkImg\"\r\n");
      out.write("\t\tvalue=\"https://openlayers.org/en/v3.20.1/examples/data/icon.png\">\r\n");
      out.write("\t\t<img src=\"https://openlayers.org/en/v3.20.1/examples/data/icon.png\" />\r\n");
      out.write("\t\t<input type=\"checkbox\" id=\"mkImg\"\r\n");
      out.write("\t\tvalue=\"https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png\">\r\n");
      out.write("\t\t<img\r\n");
      out.write("\t\tsrc=\"https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png\" />\r\n");
      out.write("\t</label>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t<div id=\"map1Wrap\" style=\"width: 43%; height: 648px;\">\r\n");
      out.write("\t\t<div id=\"map1\" style=\"width: 100%; height: 100%;\"></div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div id=\"map2Wrap\" style=\"width: 43%; height: 648px; padding: 2px;\">\r\n");
      out.write("\t\t<div id=\"map2\" style=\"width: 100%; height: 100%;\"></div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div id=\"info\" style=\"top: 80%; left: 30%;\"></div>\r\n");
      out.write("\r\n");
      out.write("\t<div id=\"option\"\r\n");
      out.write("\t\tstyle=\"border: solid 0.1px; width: 13%; height: 800px; float: left; overflow: auto;\">\r\n");
      out.write("\t\t<div style=\"\">\r\n");
      out.write("\t\t\t<p style=\"background-color: black; color: white;\">지도선택</p>\r\n");
      out.write("\t\t\t<label><input type=\"checkbox\" id=\"mapId\" value=\"map1\">Map1</label>\r\n");
      out.write("\t\t\t<label><input type=\"checkbox\" id=\"mapId\" value=\"map2\">Map2</label>\r\n");
      out.write("\t\t\t<br> <br>\r\n");
      out.write("\t\t\t<button type=\"button\" onclick=\"javascript:mapChange()\">지도선택</button><br/>\r\n");
      out.write("\t\t\t<span><a href=\"#\" onclick=\"javascript:showMap1();\">map1 함께보기</a></span><br/> \r\n");
      out.write("\t\t\t<span><a href=\"#\" onclick=\"javascript:showMap2();\">map2 함께보기</a></span><br/>\r\n");
      out.write("\t\t\t<button type=\"button\"> 1분활</button>\r\n");
      out.write("\t\t\t<button type=\"button\"> 2분활</button>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<hr>\r\n");
      out.write("\t\t<div>\r\n");
      out.write("\t\t\t<p style=\"background-color: black; color: white;\">지도 타입변경\r\n");
      out.write("\t\t\t<p>\r\n");
      out.write("\t\t\t\t<input type=\"checkbox\" id=\"vworldTile\" value=\"Base\">기본지도\r\n");
      out.write("\t\t\t</p>\r\n");
      out.write("\t\t\t<p>\r\n");
      out.write("\t\t\t\t<input type=\"checkbox\" id=\"vworldTile\" value=\"Satelite\">항공사진\r\n");
      out.write("\t\t\t</p>\r\n");
      out.write("\t\t\t<!--p><input type=\"checkbox\" id=\"vworldTile\" value=\"Hybrid\">문자 타일</p-->\r\n");
      out.write("\t\t\t<button type=\"button\" onclick=\"javascript:tileChange()\">지도옵션선택</button>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<hr>\r\n");
      out.write("\r\n");
      out.write("\t\t<div id=\"wms\" style=\"\">\r\n");
      out.write("\t\t\t<p style=\"background-color: black; color: white;\">WMS\r\n");
      out.write("\t\t\t<p>\r\n");
      out.write("\t\t\t\t<button type=\"button\" onclick=\"javascript:sig();\" name=\"importwms\">'시군구'\r\n");
      out.write("\t\t\t\t\t주제도</button>\r\n");
      out.write("\t\t\t\t<button type=\"button\" onclick=\"javascript:sigdelete();\"\r\n");
      out.write("\t\t\t\t\tname=\"importwms\">'시군구' 삭제</button>\r\n");
      out.write("\t\t\t\t<br>\r\n");
      out.write("\t\t\t<p>\r\n");
      out.write("\t\t\t\t<button type=\"button\" onclick=\"javascript:ctp();\" name=\"importwms\">'시도'\r\n");
      out.write("\t\t\t\t\t주제도</button>\r\n");
      out.write("\t\t\t\t<button type=\"button\" onclick=\"javascript:ctpdelete();\"\r\n");
      out.write("\t\t\t\t\tname=\"importwms\">'시도' 삭제</button>\r\n");
      out.write("\t\t\t\t<br>\r\n");
      out.write("\t\t\t<p>\r\n");
      out.write("\t\t\t\t<button type=\"button\" onclick=\"javascript:iconOn();\"\r\n");
      out.write("\t\t\t\t\tname=\"importwms\">'졸음쉼터 on'</button>\r\n");
      out.write("\t\t\t\t<button type=\"button\" onclick=\"javascript:iconOff();\"\r\n");
      out.write("\t\t\t\t\tname=\"importwms\">'졸음쉼터 off'</button>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<hr>\r\n");
      out.write("\t\t<div id=\"marker\" style=\"\">\r\n");
      out.write("\t\t\t<p style=\"background-color: black; color: white;\">기능\r\n");
      out.write("\t\t\t<form class=\"form-inline\">\r\n");
      out.write("\t\t\t\t<label>옵션 타입 &nbsp;</label> <select id=\"type\">\r\n");
      out.write("\t\t\t\t\t<option value=\"length\">Length (LineString)</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"area\">Area (Polygon)</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"Point\" selected>Point</option>\r\n");
      out.write("\t\t\t\t\t<!-- <option value=\"Circle\">Circle</option> -->\r\n");
      out.write("\t\t\t\t\t<option value=\"Select\">선택</option>\r\n");
      out.write("\t\t\t\t</select>\r\n");
      out.write("\t\t\t</form>\r\n");
      out.write("\t\t\t<label> 제목 <input type=\"text\" id=\"subj\"\r\n");
      out.write("\t\t\t\tplaceholder=\"작업제목을 입력하세요\" />\r\n");
      out.write("\t\t\t</label> <br> <label> 작업내용 <textarea id=\"cont\"\r\n");
      out.write("\t\t\t\t\tplaceholder=\"작업내용을 입력하세요\"></textarea>\r\n");
      out.write("\t\t\t</label>\r\n");
      out.write("\t\t\t<div id=\"searchMarker\">\r\n");
      out.write("\t\t\t\t<form>\r\n");
      out.write("\t\t\t\t\t<label>마커 이미지:&nbsp;</label> <select id=\"mkType\">\r\n");
      out.write("\t\t\t\t\t\t<option value=\"http://map.vworld.kr/images/ol3/marker_blue.png\"\r\n");
      out.write("\t\t\t\t\t\t\tselected>1번마커</option>\r\n");
      out.write("\t\t\t\t\t\t<option value=\"http://map.vworld.kr/images/ol3/marker.png\">2번마커</option>\r\n");
      out.write("\t\t\t\t\t\t<option\r\n");
      out.write("\t\t\t\t\t\t\tvalue=\"https://openlayers.org/en/v3.20.1/examples/data/icon.png\">3번마커</option>\r\n");
      out.write("\t\t\t\t\t\t<option\r\n");
      out.write("\t\t\t\t\t\t\tvalue=\"https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png\">4번마커</option>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t</form>\r\n");
      out.write("\t\t\t\t<a href=\"#\" onclick=\"javascript:showSelect_Marker();\">모든 마커 스타일\r\n");
      out.write("\t\t\t\t\t보기</a>\r\n");
      out.write("\t\t\t\t<div id=\"showmarker\"\r\n");
      out.write("\t\t\t\t\tstyle=\"width: 50px; height: 50px; text-align: center;\"></div>\r\n");
      out.write("\t\t\t\t<div id=\"selectMarker\" style=\"display: none;\">\r\n");
      out.write("\t\t\t\t\t<a href=\"#\" onclick=\"javascript:hideSelect_Marker();\">닫기</a> <br>\r\n");
      out.write("\t\t\t\t\t1번 <img src=\"http://map.vworld.kr/images/ol3/marker_blue.png\" />\r\n");
      out.write("\t\t\t\t\t2번 <img src=\"http://map.vworld.kr/images/ol3/marker.png\" /> 3번 <img\r\n");
      out.write("\t\t\t\t\t\tsrc=\"https://openlayers.org/en/v3.20.1/examples/data/icon.png\" />\r\n");
      out.write("\t\t\t\t\t4번<img\r\n");
      out.write("\t\t\t\t\t\tsrc=\"https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png\" />\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<!--- 테스트중 --->\r\n");
      out.write("\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<hr>\r\n");
      out.write("\t\t\t<p style=\"background-color: black; color: white;\">Select기능</p>\r\n");
      out.write("\t\t\t<label><input type=\"checkbox\" id=\"roadview\" value=\"1\">로드뷰\r\n");
      out.write("\t\t\t\t보기</label> <label><input type=\"checkbox\" id=\"deleteMarker\" value=\"1\">삭제</label>\r\n");
      out.write("\t\t\t<hr>\r\n");
      out.write("\t\t\t<p style=\"background-color: black; color: white;\">Delete기능</p>\r\n");
      out.write("\t\t\t<button type=\"button\" onclick=\"javascript:map1_delete();\">MAP1\r\n");
      out.write("\t\t\t\t옵션 전체삭제</button>\r\n");
      out.write("\t\t\t<br>\r\n");
      out.write("\t\t\t<button type=\"button\" onclick=\"javascript:map2_delete();\">MAP2\r\n");
      out.write("\t\t\t\t옵션 전체삭제</button>\r\n");
      out.write("\t\t\t<br>\r\n");
      out.write("\t\t\t<button type=\"button\" onclick=\"javascript:all_delete();\">전체\r\n");
      out.write("\t\t\t\tMAP 옵션 전체삭제</button>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div id=\"popupTest\" style=\"width: 300px; display: none;\"></div>\r\n");
      out.write("\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div>\r\n");
      out.write("\t\t<!-- 검색 폼  -->\r\n");
      out.write("\t\t<!-- 데이터 API 폼  -->\r\n");
      out.write("\t\t<form id=\"dataForm\">\r\n");
      out.write("\t\t\t<input type=\"hidden\" name=\"key\"\r\n");
      out.write("\t\t\t\tvalue=\"CEB52025-E065-364C-9DBA-44880E3B02B8\"> <input\r\n");
      out.write("\t\t\t\ttype=\"hidden\" name=\"domain\" value=\"http://localhost:8080\"> <input\r\n");
      out.write("\t\t\t\ttype=\"hidden\" name=\"service\" value=\"data\"> <input\r\n");
      out.write("\t\t\t\ttype=\"hidden\" name=\"version\" value=\"2.0\"> <input\r\n");
      out.write("\t\t\t\ttype=\"hidden\" name=\"request\" value=\"getfeature\"> <input\r\n");
      out.write("\t\t\t\ttype=\"hidden\" name=\"format\" value=\"json\"> <input\r\n");
      out.write("\t\t\t\ttype=\"hidden\" name=\"size\" value=\"1000\"> <input type=\"hidden\"\r\n");
      out.write("\t\t\t\tname=\"page\" value=\"1\"> <input type=\"hidden\" name=\"data\"\r\n");
      out.write("\t\t\t\tvalue=\"LT_C_SPBD\"> <input type=\"hidden\" name=\"geometry\"\r\n");
      out.write("\t\t\t\tvalue=\"true\"> <input type=\"hidden\" name=\"attribute\"\r\n");
      out.write("\t\t\t\tvalue=\"true\"> <input type=\"hidden\" name=\"crs\"\r\n");
      out.write("\t\t\t\tvalue=\"EPSG:900913\">\r\n");
      out.write("\t\t\t<!-- <input type=\"hidden\" name=\"geomfilter\" value=\"BOX(14028876.609587036,3912653.333809428,14151175.854843318,3974414.4526638505)\"> -->\r\n");
      out.write("\t\t\t<input type=\"hidden\" name=\"geomfilter\"\r\n");
      out.write("\t\t\t\tvalue=\"POINT(14028876.609587036 3912653.333809428)\">\r\n");
      out.write("\t\t</form>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div id=\"result\"\r\n");
      out.write("\t\tstyle=\"overflow: scroll; width: 1500px; height: 500px; margin-top: 10%;\">\r\n");
      out.write("\t\t<!-- P class=\"noticePrev\">검색결과 -->\r\n");
      out.write("\r\n");
      out.write("\t\t<p class=\"notice\" style=\"display: none; color: red;\">클릭시 해당 좌표로\r\n");
      out.write("\t\t\t이동합니다\r\n");
      out.write("\t\t<hr>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t<p id=\"result_count\" style=\"text-align: center;\"></p>\r\n");
      out.write("\r\n");
      out.write("\t\t<ul id=\"result_ajax\">\r\n");
      out.write("\t\t\t<!--검색결과 ajax 장소, count 개수-->\r\n");
      out.write("\t\t\t<li></li>\r\n");
      out.write("\t\t</ul>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t<p id=\"result_pos\"></p>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<script>\r\n");
      out.write("\tfunction showSelect_Marker(){\r\n");
      out.write("\t\t$(selectMarker).show();\r\n");
      out.write("\t}\r\n");
      out.write("    function hideSelect_Marker(){\r\n");
      out.write("        $(selectMarker).hide();\r\n");
      out.write("    }\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\tfunction popup_delete(){\r\n");
      out.write("\t\t$('#popupTest').hide();\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction showMap1(){\r\n");
      out.write("        $(\"#map1\").css(\"opacity\", \"1\");\r\n");
      out.write("    }\r\n");
      out.write("    function showMap2(){\r\n");
      out.write("        $(\"#map2\").css(\"opacity\", \"1\");\r\n");
      out.write("    }\r\n");
      out.write("\t//1번 지도 마커 초기화\r\n");
      out.write("\tfunction map1_delete(){\r\n");
      out.write("        map1.getLayers().forEach(layer => layer.getSource().refresh());\r\n");
      out.write("        map1.getOverlays().getArray().slice(0).forEach(function(MeasureTooltip) {\r\n");
      out.write("            map1.removeOverlay(MeasureTooltip);\r\n");
      out.write("            });\r\n");
      out.write("    }\r\n");
      out.write("\tfunction map2_delete(){\r\n");
      out.write("        map2.getLayers().forEach(layer => layer.getSource().refresh());\r\n");
      out.write("        map2.getOverlays().getArray().slice(0).forEach(function(MeasureTooltip) {\r\n");
      out.write("            map2.removeOverlay(MeasureTooltip);\r\n");
      out.write("            });\r\n");
      out.write("    }\r\n");
      out.write("\tfunction all_delete(){\r\n");
      out.write("\t\tmap1.getLayers().forEach(layer => layer.getSource().refresh());\r\n");
      out.write("        map1.getOverlays().getArray().slice(0).forEach(function(MeasureTooltip) {\r\n");
      out.write("            map1.removeOverlay(MeasureTooltip);\r\n");
      out.write("            });\r\n");
      out.write("        \r\n");
      out.write("\t\tmap2.getLayers().forEach(layer => layer.getSource().refresh());\r\n");
      out.write("        map2.getOverlays().getArray().slice(0).forEach(function(MeasureTooltip) {\r\n");
      out.write("            map2.removeOverlay(MeasureTooltip);\r\n");
      out.write("            });\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("        //지도 소스 생성//\r\n");
      out.write("        var VworldBase, VworldSatellite, VworldHybrid;\r\n");
      out.write("        var VworldHybrid = new ol.source.XYZ({\r\n");
      out.write("            url: 'http://api.vworld.kr/req/wmts/1.0.0/CEB52025-E065-364C-9DBA-44880E3B02B8/Hybrid/{z}/{y}/{x}.png'\r\n");
      out.write("        }); //문자 타일 레이어\r\n");
      out.write("\r\n");
      out.write("        var VworldSatellite = new ol.source.XYZ({\r\n");
      out.write("            url: 'http://api.vworld.kr/req/wmts/1.0.0/CEB52025-E065-364C-9DBA-44880E3B02B8/Satellite/{z}/{y}/{x}.jpeg'\r\n");
      out.write("            \r\n");
      out.write("        }); //항공사진 레이어 타일\r\n");
      out.write("\r\n");
      out.write("        var VworldBase = new ol.source.XYZ({\r\n");
      out.write("            url: 'http://api.vworld.kr/req/wmts/1.0.0/CEB52025-E065-364C-9DBA-44880E3B02B8/Base/{z}/{y}/{x}.png'\r\n");
      out.write("\r\n");
      out.write("        });\r\n");
      out.write("        //지도 선택\r\n");
      out.write("        var mouseControlCoordinate = new ol.control.MousePosition({\r\n");
      out.write("                            coordinateFormat : new ol.coordinate.createStringXY(4),\r\n");
      out.write("                            projection : 'EPSG:3857',//좌표계 설정\r\n");
      out.write("                            className : 'mposition', //css 클래스 이름\r\n");
      out.write("                            target : document.getElementById('mouseCoordinate'),//좌표를 뿌릴 element\r\n");
      out.write("                        });\r\n");
      out.write("                        var mouseControlCoordinate2 = new ol.control.MousePosition({\r\n");
      out.write("                            coordinateFormat : new ol.coordinate.createStringXY(4),\r\n");
      out.write("                            projection : 'EPSG:3857',//좌표계 설정\r\n");
      out.write("                            className : 'mposition', //css 클래스 이름\r\n");
      out.write("                            target : document.getElementById('mouseCoordinate'),//좌표를 뿌릴 element\r\n");
      out.write("                        });\r\n");
      out.write("\r\n");
      out.write("    // map1 마커포인트 및 벡터레이어생성\r\n");
      out.write("    var source = new ol.source.Vector({\r\n");
      out.write("                    id: \"sourceId\"\r\n");
      out.write("                    });\r\n");
      out.write("                    source.set(\"name\", \"sourceName\");\r\n");
      out.write("\r\n");
      out.write("                    var vector = new ol.layer.Vector({\r\n");
      out.write("                    id: \"vectorId\",\r\n");
      out.write("                    source: source,\r\n");
      out.write("                    style: new ol.style.Style({\r\n");
      out.write("                        \r\n");
      out.write("                        fill: new ol.style.Fill({\r\n");
      out.write("                        color: 'rgba(52, 0, 0, 0.35)'\r\n");
      out.write("                        }),\r\n");
      out.write("                        stroke: new ol.style.Stroke({\r\n");
      out.write("                        color: '#000',\r\n");
      out.write("                        width: 2\r\n");
      out.write("                        }),\r\n");
      out.write("                        image: new ol.style.Icon(({\r\n");
      out.write("                        anchor: [0.5, 10],\r\n");
      out.write("                        anchorXUnits: 'fraction',\r\n");
      out.write("                        anchorYUnits: 'pixels',\r\n");
      out.write("                        src: 'http://map.vworld.kr/images/ol3/marker.png'\r\n");
      out.write("                        }))\r\n");
      out.write("                    })\r\n");
      out.write("                    });\r\n");
      out.write("                    vector.set(\"name\", \"vectorName\");\r\n");
      out.write("                    vector.setZIndex(1000);\r\n");
      out.write("    //map2의 벡터레이어 생성\r\n");
      out.write("        var source2 = new ol.source.Vector({\r\n");
      out.write("                    id: \"sourceId\"\r\n");
      out.write("                    });\r\n");
      out.write("                    source2.set(\"name\", \"sourceName\");\r\n");
      out.write("\r\n");
      out.write("       var vector2 = new ol.layer.Vector({\r\n");
      out.write("                    id: \"vectorId\",\r\n");
      out.write("                    source: source2,\r\n");
      out.write("                    style: new ol.style.Style({\r\n");
      out.write("                        \r\n");
      out.write("                        fill: new ol.style.Fill({\r\n");
      out.write("                        color: 'rgba(52, 0, 0, 0.35)'\r\n");
      out.write("                        }),\r\n");
      out.write("                        stroke: new ol.style.Stroke({\r\n");
      out.write("                        color: '#000',\r\n");
      out.write("                        width: 2\r\n");
      out.write("                        }),\r\n");
      out.write("                        image: new ol.style.Icon(({\r\n");
      out.write("                        anchor: [0.5, 10],\r\n");
      out.write("                        anchorXUnits: 'fraction',\r\n");
      out.write("                        anchorYUnits: 'pixels',\r\n");
      out.write("                        src: 'http://map.vworld.kr/images/ol3/marker.png'\r\n");
      out.write("                        }))\r\n");
      out.write("                    })\r\n");
      out.write("                    });\r\n");
      out.write("                    vector2.set(\"name\", \"vectorName\");\r\n");
      out.write("                    vector2.setZIndex(1000);\r\n");
      out.write("        var map;\r\n");
      out.write("        var lastSelect;\r\n");
      out.write("        var lastSelect2;\r\n");
      out.write("        \r\n");
      out.write("        function mapChange(){\r\n");
      out.write("        \t\r\n");
      out.write("            var mapLength = $('input:checkbox[id=\"mapId\"]:checked').length;\r\n");
      out.write("            map = $('input:checkbox[id=\"mapId\"]:checked').val();\r\n");
      out.write("            var userMap='';\r\n");
      out.write("            if(map =='map1'){\r\n");
      out.write("            \tif(lastSelect==null){\r\n");
      out.write("            \t\t$(\"#type\").val(\"Point\").prop(\"selected\",true);\r\n");
      out.write("                    \t\r\n");
      out.write("                }else if(lastSelect != null){\r\n");
      out.write("                \tmap1.removeInteraction(draw);\r\n");
      out.write("                    map1.getInteractions().getArray().forEach(function (i) {\r\n");
      out.write("                        if (i.get(\"이벤트\") == \"선택\") {\r\n");
      out.write("                            map1.removeInteraction(i);\r\n");
      out.write("                                \r\n");
      out.write("                            \r\n");
      out.write("                        }\r\n");
      out.write("                    })\r\n");
      out.write("                \t$(\"#type\").val(lastSelect).prop(\"selected\",true);\r\n");
      out.write("                \t\r\n");
      out.write("                }\t\r\n");
      out.write("            }else if(map =='map2'){\r\n");
      out.write("            \tif(lastSelect2==null){\r\n");
      out.write("            \t\t$(\"#type\").val(\"Point\").prop(\"selected\",true);\r\n");
      out.write("                    \t\r\n");
      out.write("                }else if(lastSelect2 != null){\r\n");
      out.write("                \t\r\n");
      out.write("                \t$(\"#type\").val(lastSelect2).prop(\"selected\",true);\r\n");
      out.write("                }\r\n");
      out.write("            \t\r\n");
      out.write("            }\r\n");
      out.write("            \r\n");
      out.write("            \r\n");
      out.write("        \tuserMap+=\"<p>현재 사용중인 지도 : \"+map+\"번 지도</p>\"\r\n");
      out.write("            $('#useMap').html(userMap);\r\n");
      out.write("            // 마우스 핸들러\r\n");
      out.write("            function pointerMoveHandler(event){\r\n");
      out.write("            //map.on('pointermove', pointerMoveHandler);\r\n");
      out.write("    \r\n");
      out.write("            \r\n");
      out.write("                var features = map.getFeaturesAtPixel(event.pixel);\r\n");
      out.write("                if (!features) {\r\n");
      out.write("                    // 마우스 위치에 어떠한 Feature도 없음\r\n");
      out.write("                    return;\r\n");
      out.write("                }\r\n");
      out.write("                // 마우스 포인터 위치에 존재하는 Feature 중 첫번째(features[0])\r\n");
      out.write("                var properties = features[0].getProperties();  \r\n");
      out.write("                // properties 객체가 object 타입의 Feature에 대한 속성값임\r\n");
      out.write("                \r\n");
      out.write("            \r\n");
      out.write("            }\r\n");
      out.write("            \r\n");
      out.write("            \r\n");
      out.write("                    var sketch;\r\n");
      out.write("                    var helpTooltipElement;\r\n");
      out.write("                    var helpTooltip;\r\n");
      out.write("                    var measureTooltipElement;\r\n");
      out.write("                    var measureTooltip;\r\n");
      out.write("                    var continuePolygonMsg = 'polygon을 그리는 중입니다.';\r\n");
      out.write("                    var continueLineMsg = 'Line을 그리는 중입니다.';\r\n");
      out.write("\r\n");
      out.write("                   \r\n");
      out.write("                    var pointerMoveHandler = function (evt) {\r\n");
      out.write("                    if (evt.dragging) {\r\n");
      out.write("                        return;\r\n");
      out.write("                    }\r\n");
      out.write("                    \r\n");
      out.write("                    var helpMsg ='지도를 이동하세요.';\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("                    if (sketch) {\r\n");
      out.write("                        var geom = (sketch.getGeometry());\r\n");
      out.write("                        if (geom instanceof ol.geom.Polygon) {\r\n");
      out.write("                        helpMsg = continuePolygonMsg;\r\n");
      out.write("                        } else if (geom instanceof ol.geom.LineString) {\r\n");
      out.write("                        helpMsg = continueLineMsg;\r\n");
      out.write("                        }\r\n");
      out.write("                    }\r\n");
      out.write("                    helpTooltipElement.innerHTML = helpMsg;\r\n");
      out.write("                    helpTooltip.setPosition(evt.coordinate);\r\n");
      out.write("\r\n");
      out.write("                    helpTooltipElement.classList.remove('hidden');\r\n");
      out.write("\r\n");
      out.write("                    \r\n");
      out.write("                    };\r\n");
      out.write("            var typeSelect = document.getElementById('type');\r\n");
      out.write("            var mkSelect = document.getElementById('mkType');\r\n");
      out.write("            \r\n");
      out.write("            //테스트중\r\n");
      out.write("            \r\n");
      out.write("        \r\n");
      out.write("\r\n");
      out.write("        var draw; // global so we can remove it later\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        var formatLength = function (line) {\r\n");
      out.write("            var length = ol.sphere.getLength(line);\r\n");
      out.write("            var output;\r\n");
      out.write("            if (length > 100) {\r\n");
      out.write("                output = (Math.round(length / 1000 * 100) / 100) +\r\n");
      out.write("                    ' ' + 'km';\r\n");
      out.write("            } else {\r\n");
      out.write("                output = (Math.round(length * 100) / 100) +\r\n");
      out.write("                    ' ' + 'm';\r\n");
      out.write("            }\r\n");
      out.write("            return output;\r\n");
      out.write("        };\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        var formatArea = function (polygon) {\r\n");
      out.write("            var area = ol.sphere.getArea(polygon);\r\n");
      out.write("            var output;\r\n");
      out.write("            if (area > 10000) {\r\n");
      out.write("                output = (Math.round(area / 1000000 * 100) / 100) +\r\n");
      out.write("                    ' ' + 'km<sup>2</sup>';\r\n");
      out.write("            } else {\r\n");
      out.write("                output = (Math.round(area * 100) / 100) +\r\n");
      out.write("                    ' ' + 'm<sup>2</sup>';\r\n");
      out.write("            }\r\n");
      out.write("            return output;\r\n");
      out.write("        };\r\n");
      out.write("\r\n");
      out.write("            if(mapLength ==1){\r\n");
      out.write("                \r\n");
      out.write("                helpTooltip = new ol.Overlay({\r\n");
      out.write("                element: helpTooltipElement,\r\n");
      out.write("                offset: [15, 0],\r\n");
      out.write("                positioning: 'center-left'\r\n");
      out.write("            });\r\n");
      out.write("            if(map=='map1'){\r\n");
      out.write("            \t$(\"#map1\").css(\"opacity\", \"1\");\r\n");
      out.write("                $(\"#map2\").css(\"opacity\", \"0.1\");\r\n");
      out.write("    \r\n");
      out.write("            map1.on('pointermove', pointerMoveHandler);\r\n");
      out.write("        map1.getViewport().addEventListener('mouseout', function () {\r\n");
      out.write("            helpTooltipElement.classList.add('hidden');\r\n");
      out.write("        });\r\n");
      out.write("        \r\n");
      out.write("        function addInteraction() {\r\n");
      out.write("            var type = '';\r\n");
      out.write("            if (typeSelect.value == 'area') {\r\n");
      out.write("                type = 'Polygon';\r\n");
      out.write("            } else if (typeSelect.value == 'length') {\r\n");
      out.write("                type = 'LineString';\r\n");
      out.write("            } else if (typeSelect.value == 'Circle') {\r\n");
      out.write("                type = 'Circle';\r\n");
      out.write("            } else if (typeSelect.value == 'Point') {\r\n");
      out.write("                type = 'Point';\r\n");
      out.write("                \r\n");
      out.write("            } else if (typeSelect.value == 'Select') {\r\n");
      out.write("                var select; \r\n");
      out.write("                \r\n");
      out.write("                select = new ol.interaction.Select({\r\n");
      out.write("                    condition: ol.events.condition.click\r\n");
      out.write("                })\r\n");
      out.write("                select.set(\"이벤트\", \"선택\");\r\n");
      out.write("                select.on(\"select\", function (evt) {\r\n");
      out.write("                \r\n");
      out.write("                    var length = evt.target.getFeatures().getLength();\r\n");
      out.write("                    if (length > 0) {\r\n");
      out.write("                        var popup_Test =\"\";\r\n");
      out.write("                        subj = evt.target.getFeatures().getArray()[0].get(\"subj\");\r\n");
      out.write("                        cont = evt.target.getFeatures().getArray()[0].get(\"cont\");\r\n");
      out.write("                        \r\n");
      out.write("                        \r\n");
      out.write("                        var features = evt.target.getFeatures().getArray();\r\n");
      out.write("                        var feature = features[0]\r\n");
      out.write("                        var getLayer = select.getLayer(feature); //마커 옵션중 마커를 변경하기위해선 레이어를 계속 추가해야함으로 선택된 feature의 레이어를 찾아야함.\r\n");
      out.write("                        \r\n");
      out.write("                        var checkroadview=$('input:checkbox[id=\"roadview\"]:checked').length;\r\n");
      out.write("                        var deleteMk=$('input:checkbox[id=\"deleteMarker\"]:checked').length;\r\n");
      out.write("                        \r\n");
      out.write("                        if(deleteMk >0){\r\n");
      out.write("                        \tvar ftId=feature.getId();\t//생성된 feautre 아이디를 구함\r\n");
      out.write("                        \t\r\n");
      out.write("                        \tif(ftId !=null){\t//search 해서 생성된 마커에는 오버레이가 존재할수 없기때문에 id가 없음\r\n");
      out.write("                        \t\tvar olId=map1.getOverlayById(ftId);\t//면적넓이와 길이 오버레이를 feautre id로 찾아냄\r\n");
      out.write("                        \t\tmap1.getOverlays().getArray().slice(0).forEach(function(measureTooltip) {\r\n");
      out.write("                                    map1.removeOverlay(olId); //해당 feature의 오버레이를 삭제\r\n");
      out.write("                                });\r\n");
      out.write("                        \t}\r\n");
      out.write("\r\n");
      out.write("                            getLayer.getSource().removeFeature(feature);//선택된 feautre의 레이어 중 선택된 feature을 삭제\r\n");
      out.write("\r\n");
      out.write("                            \r\n");
      out.write("                        }\r\n");
      out.write("                        if(checkroadview >0){\r\n");
      out.write("                        \tvar xy=features[0].getGeometry().getCoordinates();\r\n");
      out.write("                            \r\n");
      out.write("                            lon= xy[0];\r\n");
      out.write("                            lat= xy[1];\r\n");
      out.write("                        \t\r\n");
      out.write("                            var tansform = ol.proj.transform([lon,lat], 'EPSG:3857', 'EPSG:4326')// 브이월드 좌표계에서 다음 지도 좌표계로 변환 EPSG:3857=>EPSG:4326\r\n");
      out.write("                            \r\n");
      out.write("                            var roadview=\"https://map.kakao.com/link/roadview/\"+tansform[1]+\",\"+tansform[0];   // 로드뷰 불러오기\r\n");
      out.write("                            if(tansform=='NaN,NaN'){\r\n");
      out.write("                            \talert('로드뷰는 마커를 선택해주세요');\r\n");
      out.write("                            \treturn false;\r\n");
      out.write("                            }\r\n");
      out.write("                            window.open(roadview, '로드뷰팝업', 'width=500, height=700, scrollbars=yes, resizable=no')\r\n");
      out.write("                            \r\n");
      out.write("                            }\r\n");
      out.write("                        \r\n");
      out.write("                        if(cont != ''){\r\n");
      out.write("                            $('#popupTest').show();\r\n");
      out.write("                            $(\"#popupTest\").css(\"left\", \"83%\");\r\n");
      out.write("                        }else if(cont ==''){\r\n");
      out.write("                            $('#popupTest').hide();\r\n");
      out.write("                        }\r\n");
      out.write("                        \r\n");
      out.write("                        popup_Test += '<p style=\"float:right;\"><a href=\"#\" onclick=\"javascript:popup_delete();\">닫기</a><p>'+subj;\r\n");
      out.write("                            $('#popupTest').html(popup_Test);\r\n");
      out.write("                            \r\n");
      out.write("                        \r\n");
      out.write("                    }\r\n");
      out.write("                })\r\n");
      out.write("                    map1.addInteraction(select);\r\n");
      out.write("                    return;\r\n");
      out.write("            \r\n");
      out.write("            }\r\n");
      out.write("            \r\n");
      out.write("            //let imgLength = $('input:checkbox[id=\"mkImg\"]:checked').length;\r\n");
      out.write("            //let imgsrc = $('input:checkbox[id=\"mkImg\"]:checked').val();\r\n");
      out.write("            let imgsrc = mkSelect.value\r\n");
      out.write("            \r\n");
      out.write("            //테스트\r\n");
      out.write("            newSource = new ol.source.Vector({\r\n");
      out.write("                    id: \"sourceId\"\r\n");
      out.write("                    });\r\n");
      out.write("                    newSource.set(\"name\", \"sourceName\");\r\n");
      out.write("\r\n");
      out.write("            newVector = new ol.layer.Vector({\r\n");
      out.write("                    id: \"vectorId\",\r\n");
      out.write("                    source: newSource,\r\n");
      out.write("                    style: new ol.style.Style({\r\n");
      out.write("                        \r\n");
      out.write("                        fill: new ol.style.Fill({\r\n");
      out.write("                        color: 'rgba(52, 0, 0, 0.35)'\r\n");
      out.write("                        }),\r\n");
      out.write("                        stroke: new ol.style.Stroke({\r\n");
      out.write("                        color: '#000',\r\n");
      out.write("                        width: 2\r\n");
      out.write("                        }),\r\n");
      out.write("                        image: new ol.style.Icon(({\r\n");
      out.write("                        anchor: [0.5, 10],\r\n");
      out.write("                        anchorXUnits: 'fraction',\r\n");
      out.write("                        anchorYUnits: 'pixels',\r\n");
      out.write("                        src: imgsrc\r\n");
      out.write("                        }))\r\n");
      out.write("                    })\r\n");
      out.write("                });\r\n");
      out.write("                \r\n");
      out.write("\r\n");
      out.write("            newVector.set(\"name\", \"vectorName\");\r\n");
      out.write("            newVector.setZIndex(1000);\r\n");
      out.write("           \r\n");
      out.write("            draw = new ol.interaction.Draw({\r\n");
      out.write("                source: newSource,\r\n");
      out.write("                type: type,\r\n");
      out.write("                style: new ol.style.Style({\r\n");
      out.write("                    fill: new ol.style.Fill({\r\n");
      out.write("                        color: 'rgba(255, 255, 255, 0.2)'\r\n");
      out.write("                    }),\r\n");
      out.write("                    stroke: new ol.style.Stroke({\r\n");
      out.write("                        color: 'rgba(0, 0, 0, 0.5)',\r\n");
      out.write("                        lineDash: [10, 10],\r\n");
      out.write("                        width: 5\r\n");
      out.write("                    }),\r\n");
      out.write("                    image: new ol.style.Circle({\r\n");
      out.write("                        radius: 5,\r\n");
      out.write("                        stroke: new ol.style.Stroke({\r\n");
      out.write("                            color: 'rgba(0, 0, 0, 0.7)'\r\n");
      out.write("                        }),\r\n");
      out.write("                        fill: new ol.style.Fill({\r\n");
      out.write("                            color: 'rgba(255, 255, 255, 0.2)'\r\n");
      out.write("                        })\r\n");
      out.write("                    })\r\n");
      out.write("                })\r\n");
      out.write("            });\r\n");
      out.write("            map1.addLayer(newVector);\r\n");
      out.write("            map1.addInteraction(draw);\r\n");
      out.write("           \r\n");
      out.write("            \r\n");
      out.write("\r\n");
      out.write("            createMeasureTooltip();\r\n");
      out.write("            createHelpTooltip();\r\n");
      out.write("\r\n");
      out.write("            var listener;\r\n");
      out.write("            draw.on('drawstart',\r\n");
      out.write("                function (evt) {\r\n");
      out.write("                    // set sketch\r\n");
      out.write("                    sketch = evt.feature;\r\n");
      out.write("\r\n");
      out.write("                    var tooltipCoord = evt.coordinate;\r\n");
      out.write("\r\n");
      out.write("                    listener = sketch.getGeometry().on('change', function (evt) {\r\n");
      out.write("                        var geom = evt.target;\r\n");
      out.write("                        var output;\r\n");
      out.write("                        if (geom instanceof ol.geom.Polygon) {\r\n");
      out.write("                            output = formatArea(geom);\r\n");
      out.write("                            tooltipCoord = geom.getInteriorPoint().getCoordinates();\r\n");
      out.write("                        } else if (geom instanceof ol.geom.LineString) {\r\n");
      out.write("                            output = formatLength(geom);\r\n");
      out.write("                            tooltipCoord = geom.getLastCoordinate();\r\n");
      out.write("                        } else if (geom instanceof ol.geom.Circle) {//거리계산 구현\r\n");
      out.write("                            var length = ol.sphere.getDistance(ol.proj.transform(geom.getCenter(), 'EPSG:900913', 'EPSG:3857'), ol.proj.transform(geom.getLastCoordinate(), 'EPSG:900913', 'EPSG:3857'), 6378137)\r\n");
      out.write("                            if (length > 100) {\r\n");
      out.write("                                output = (Math.round(length / 1000 * 100) / 100) +\r\n");
      out.write("                                    ' ' + 'km';\r\n");
      out.write("                            } else {\r\n");
      out.write("                                output = (Math.round(length * 100) / 100) +\r\n");
      out.write("                                    ' ' + 'm';\r\n");
      out.write("                            }\r\n");
      out.write("                            tooltipCoord = geom.getLastCoordinate();\r\n");
      out.write("                        }\r\n");
      out.write("                        measureTooltipElement.innerHTML = output;\r\n");
      out.write("                        measureTooltip.setPosition(tooltipCoord);\r\n");
      out.write("                    });\r\n");
      out.write("                }, this);\r\n");
      out.write("\r\n");
      out.write("            draw.on('drawend',\r\n");
      out.write("                function (evt) {\r\n");
      out.write("                    feature = evt.feature;\r\n");
      out.write("                    var subj = document.getElementById('subj').value\r\n");
      out.write("                    var cont = document.getElementById('cont').value\r\n");
      out.write("\r\n");
      out.write("                    var marker_html=\"\";\r\n");
      out.write("                    marker_html+= \"<span>작업 제목 :\"+subj+\"<hr>작업 내용 :\"+cont+\"<span>\";\r\n");
      out.write("                    \r\n");
      out.write("                    feature.setId(setId);\r\n");
      out.write("\r\n");
      out.write("                    feature.set(\"subj\",marker_html);\r\n");
      out.write("                    feature.set(\"cont\",cont);\r\n");
      out.write("                    \r\n");
      out.write("                    measureTooltipElement.className = 'tooltip tooltip-static';\r\n");
      out.write("                    measureTooltip.setOffset([0, -7]);\r\n");
      out.write("                    \r\n");
      out.write("                    sketch = null;\r\n");
      out.write("                    \r\n");
      out.write("                    measureTooltipElement = null;\r\n");
      out.write("                    createMeasureTooltip();\r\n");
      out.write("                    ol.Observable.unByKey(listener);\r\n");
      out.write("                    \r\n");
      out.write("\r\n");
      out.write("                }, this);\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        function createHelpTooltip() {\r\n");
      out.write("            if (helpTooltipElement) {\r\n");
      out.write("                helpTooltipElement.parentNode.removeChild(helpTooltipElement);\r\n");
      out.write("            }\r\n");
      out.write("            helpTooltipElement = document.createElement('div');\r\n");
      out.write("            helpTooltipElement.className = 'tooltip hidden';\r\n");
      out.write("            helpTooltip = new ol.Overlay({\r\n");
      out.write("                element: helpTooltipElement,\r\n");
      out.write("                offset: [15, 0],\r\n");
      out.write("                positioning: 'center-left'\r\n");
      out.write("            });\r\n");
      out.write("            \r\n");
      out.write("                map1.addOverlay(helpTooltip); //커서에 달린 도움말\r\n");
      out.write("\r\n");
      out.write("            \r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        var setId;\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        function createMeasureTooltip() {\r\n");
      out.write("            if (measureTooltipElement) {\r\n");
      out.write("                measureTooltipElement.parentNode.removeChild(measureTooltipElement);\r\n");
      out.write("            }\r\n");
      out.write("            measureTooltipElement = document.createElement('div');\r\n");
      out.write("            measureTooltipElement.className = 'tooltip tooltip-measure';\r\n");
      out.write("            setId =  Math.random();\r\n");
      out.write("            measureTooltip = new ol.Overlay({\r\n");
      out.write("            \tid:setId,\r\n");
      out.write("                element: measureTooltipElement,\r\n");
      out.write("                offset: [0, -15],\r\n");
      out.write("                positioning: 'bottom-center'\r\n");
      out.write("            });\r\n");
      out.write("            \r\n");
      out.write("                map1.addOverlay(measureTooltip); //넓이와 길이\r\n");
      out.write("            \r\n");
      out.write("        \r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        //테스트중\r\n");
      out.write("        \r\n");
      out.write("        mkSelect.onchange = function(){\r\n");
      out.write("        \t\r\n");
      out.write("        \tvar showmarker='';\r\n");
      out.write("            mksrc=mkSelect.value\r\n");
      out.write("            showmarker += \"<img src=\"+mksrc+\" />\";\r\n");
      out.write("            $('#showmarker').html(showmarker);\r\n");
      out.write("            map1.removeInteraction(draw);\r\n");
      out.write("            map1.getInteractions().getArray().forEach(function (i) {\r\n");
      out.write("                if (i.get(\"이벤트\") == \"선택\") {\r\n");
      out.write("                    map1.removeInteraction(i);\r\n");
      out.write("                        \r\n");
      out.write("                    \r\n");
      out.write("                }\r\n");
      out.write("            })\r\n");
      out.write("            addInteraction();\r\n");
      out.write("        }\r\n");
      out.write("        typeSelect.onchange = function () {\r\n");
      out.write("        \tlastSelect =typeSelect.value;\r\n");
      out.write("            \r\n");
      out.write("            map1.removeInteraction(draw);\r\n");
      out.write("            map1.getInteractions().getArray().forEach(function (i) {\r\n");
      out.write("                if (i.get(\"이벤트\") == \"선택\") {\r\n");
      out.write("                    map1.removeInteraction(i);\r\n");
      out.write("                        \r\n");
      out.write("                    \r\n");
      out.write("                }\r\n");
      out.write("            })\r\n");
      out.write("            addInteraction();\r\n");
      out.write("        };\r\n");
      out.write("\r\n");
      out.write("        addInteraction();\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("            }else if(map=='map2'){\r\n");
      out.write("            \t$(\"#map1\").css(\"opacity\", \"0.1\");\r\n");
      out.write("                $(\"#map2\").css(\"opacity\", \"1\");\r\n");
      out.write("                map2.on('pointermove', pointerMoveHandler);\r\n");
      out.write("\r\n");
      out.write("        \r\n");
      out.write("        \r\n");
      out.write("\r\n");
      out.write("        map2.getViewport().addEventListener('mouseout', function () {\r\n");
      out.write("            helpTooltipElement.classList.add('hidden');\r\n");
      out.write("        });\r\n");
      out.write("    \r\n");
      out.write("        function addInteraction() {\r\n");
      out.write("            var type = '';\r\n");
      out.write("            if (typeSelect.value == 'area') {\r\n");
      out.write("                type = 'Polygon';\r\n");
      out.write("            } else if (typeSelect.value == 'length') {\r\n");
      out.write("                type = 'LineString';\r\n");
      out.write("            } else if (typeSelect.value == 'Circle') {\r\n");
      out.write("                type = 'Circle';\r\n");
      out.write("            } else if (typeSelect.value == 'Point') {\r\n");
      out.write("                type = 'Point';\r\n");
      out.write("                \r\n");
      out.write("\r\n");
      out.write("            } else if (typeSelect.value == 'Select') {\r\n");
      out.write("                var select; \r\n");
      out.write("                \r\n");
      out.write("                select = new ol.interaction.Select({\r\n");
      out.write("                    condition: ol.events.condition.click\r\n");
      out.write("                })\r\n");
      out.write("                select.set(\"이벤트\", \"선택\");\r\n");
      out.write("                select.on(\"select\", function (evt) {\r\n");
      out.write("                \r\n");
      out.write("                    var length = evt.target.getFeatures().getLength();\r\n");
      out.write("                    if (length > 0) {\r\n");
      out.write("                        var popup_Test =\"\";\r\n");
      out.write("                        subj = evt.target.getFeatures().getArray()[0].get(\"subj\");\r\n");
      out.write("                        cont = evt.target.getFeatures().getArray()[0].get(\"cont\");\r\n");
      out.write("                        \r\n");
      out.write("                        feature = evt.target.getFeatures();\r\n");
      out.write("                        \r\n");
      out.write("                        var features = evt.target.getFeatures().getArray();\r\n");
      out.write("                        var feature = features[0]\r\n");
      out.write("                        var getLayer = select.getLayer(feature);\r\n");
      out.write("                        var xy=features[0].getGeometry().getCoordinates();\r\n");
      out.write("                        var checkroadview=$('input:checkbox[id=\"roadview\"]:checked').length;\r\n");
      out.write("                        lon= xy[0];\r\n");
      out.write("                        lat= xy[1];\r\n");
      out.write("                        \r\n");
      out.write("                        var deleteMk=$('input:checkbox[id=\"deleteMarker\"]:checked').length;\r\n");
      out.write("                        \r\n");
      out.write("                        \r\n");
      out.write("                        if(deleteMk >0){\r\n");
      out.write("                        \tvar ftId=feature.getId();\r\n");
      out.write("\t\t\t\t\t\t\tif(ftId != null){\r\n");
      out.write("\t\t\t\t\t\t\t\tvar olId=map2.getOverlayById(ftId);\r\n");
      out.write("\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t\tmap2.getOverlays().getArray().slice(0).forEach(function(measureTooltip) {\r\n");
      out.write("\t                               map2.removeOverlay(olId);\r\n");
      out.write("\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t                            \r\n");
      out.write("\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("                            getLayer.getSource().removeFeature(feature);\r\n");
      out.write(" \r\n");
      out.write("                        }\r\n");
      out.write("                        if(checkroadview >0){\r\n");
      out.write("                        \t\r\n");
      out.write("                            var tansform = ol.proj.transform([lon,lat], 'EPSG:3857', 'EPSG:4326')// 브이월드 좌표계에서 다음 지도 좌표계로 변환 EPSG:3857=>EPSG:4326\r\n");
      out.write("                            \r\n");
      out.write("                            if(tansform=='NaN,NaN'){\r\n");
      out.write("                            \talert('로드뷰는 마커를 선택해주세요');\r\n");
      out.write("                            \treturn false;\r\n");
      out.write("                            }\r\n");
      out.write("                            var roadview=\"https://map.kakao.com/link/roadview/\"+tansform[1]+\",\"+tansform[0];   // 로드뷰 불러오기\r\n");
      out.write("                            window.open(roadview, '로드뷰팝업', 'width=500, height=700, scrollbars=yes, resizable=no')\r\n");
      out.write("                            \r\n");
      out.write("                            }\r\n");
      out.write("                        \r\n");
      out.write("                        if(cont != ''){\r\n");
      out.write("                            $('#popupTest').show();\r\n");
      out.write("                            $(\"#popupTest\").css(\"left\", \"40%\");\r\n");
      out.write("                        }else if(cont ==''){\r\n");
      out.write("                            $('#popupTest').hide();\r\n");
      out.write("                        }\r\n");
      out.write("                        popup_Test += '<p style=\"float:right;\"><a href=\"#\" onclick=\"javascript:popup_delete();\">닫기</a><p>'+subj;\r\n");
      out.write("                        $('#popupTest').html(popup_Test);\r\n");
      out.write("                            \r\n");
      out.write("                        \r\n");
      out.write("                    }\r\n");
      out.write("                })\r\n");
      out.write("                    map2.addInteraction(select);\r\n");
      out.write("                    return;\r\n");
      out.write("            \r\n");
      out.write("            }\r\n");
      out.write("           \r\n");
      out.write("           \r\n");
      out.write("            //let imgLength = $('input:checkbox[id=\"mkImg\"]:checked').length;\r\n");
      out.write("            //let imgsrc = $('input:checkbox[id=\"mkImg\"]:checked').val();\r\n");
      out.write("            let imgsrc = mkSelect.value\r\n");
      out.write("            newSource = new ol.source.Vector({\r\n");
      out.write("                    id: \"sourceId\"\r\n");
      out.write("                    });\r\n");
      out.write("                    newSource.set(\"name\", \"sourceName\");\r\n");
      out.write("\r\n");
      out.write("            newVector = new ol.layer.Vector({\r\n");
      out.write("                    id: \"vectorId\",\r\n");
      out.write("                    source: newSource,\r\n");
      out.write("                    style: new ol.style.Style({\r\n");
      out.write("                        \r\n");
      out.write("                        fill: new ol.style.Fill({\r\n");
      out.write("                        color: 'rgba(52, 0, 0, 0.35)'\r\n");
      out.write("                        }),\r\n");
      out.write("                        stroke: new ol.style.Stroke({\r\n");
      out.write("                        color: '#000',\r\n");
      out.write("                        width: 2\r\n");
      out.write("                        }),\r\n");
      out.write("                        image: new ol.style.Icon(({\r\n");
      out.write("                        anchor: [0.5, 10],\r\n");
      out.write("                        anchorXUnits: 'fraction',\r\n");
      out.write("                        anchorYUnits: 'pixels',\r\n");
      out.write("                        src: imgsrc\r\n");
      out.write("                        }))\r\n");
      out.write("                    })\r\n");
      out.write("                });\r\n");
      out.write("\r\n");
      out.write("            newVector.set(\"name\", \"vectorName\");\r\n");
      out.write("            newVector.setZIndex(1000);\r\n");
      out.write("           \r\n");
      out.write("            draw = new ol.interaction.Draw({\r\n");
      out.write("                source: newSource,\r\n");
      out.write("                type: type,\r\n");
      out.write("                style: new ol.style.Style({\r\n");
      out.write("                    fill: new ol.style.Fill({\r\n");
      out.write("                        color: 'rgba(255, 255, 255, 0.2)'\r\n");
      out.write("                    }),\r\n");
      out.write("                    stroke: new ol.style.Stroke({\r\n");
      out.write("                        color: 'rgba(0, 0, 0, 0.5)',\r\n");
      out.write("                        lineDash: [10, 10],\r\n");
      out.write("                        width: 5\r\n");
      out.write("                    }),\r\n");
      out.write("                    image: new ol.style.Circle({\r\n");
      out.write("                        radius: 5,\r\n");
      out.write("                        stroke: new ol.style.Stroke({\r\n");
      out.write("                            color: 'rgba(0, 0, 0, 0.7)'\r\n");
      out.write("                        }),\r\n");
      out.write("                        fill: new ol.style.Fill({\r\n");
      out.write("                            color: 'rgba(255, 255, 255, 0.2)'\r\n");
      out.write("                        })\r\n");
      out.write("                    })\r\n");
      out.write("                })\r\n");
      out.write("            });\r\n");
      out.write("            map2.addLayer(newVector);\r\n");
      out.write("            map2.addInteraction(draw);\r\n");
      out.write("           \r\n");
      out.write("            \r\n");
      out.write("\r\n");
      out.write("            createMeasureTooltip();\r\n");
      out.write("            createHelpTooltip();\r\n");
      out.write("\r\n");
      out.write("            var listener;\r\n");
      out.write("            draw.on('drawstart',\r\n");
      out.write("                function (evt) {\r\n");
      out.write("                    // set sketch\r\n");
      out.write("                    sketch = evt.feature;\r\n");
      out.write("\r\n");
      out.write("                    var tooltipCoord = evt.coordinate;\r\n");
      out.write("\r\n");
      out.write("                    listener = sketch.getGeometry().on('change', function (evt) {\r\n");
      out.write("                        var geom = evt.target;\r\n");
      out.write("                        var output;\r\n");
      out.write("                        if (geom instanceof ol.geom.Polygon) {\r\n");
      out.write("                            output = formatArea(geom);\r\n");
      out.write("                            tooltipCoord = geom.getInteriorPoint().getCoordinates();\r\n");
      out.write("                        } else if (geom instanceof ol.geom.LineString) {\r\n");
      out.write("                            output = formatLength(geom);\r\n");
      out.write("                            tooltipCoord = geom.getLastCoordinate();\r\n");
      out.write("                        } else if (geom instanceof ol.geom.Circle) {//거리계산 구현\r\n");
      out.write("                            var length = ol.sphere.getDistance(ol.proj.transform(geom.getCenter(), 'EPSG:900913', 'EPSG:3857'), ol.proj.transform(geom.getLastCoordinate(), 'EPSG:900913', 'EPSG:3857'), 6378137)\r\n");
      out.write("                            if (length > 100) {\r\n");
      out.write("                                output = (Math.round(length / 1000 * 100) / 100) +\r\n");
      out.write("                                    ' ' + 'km';\r\n");
      out.write("                            } else {\r\n");
      out.write("                                output = (Math.round(length * 100) / 100) +\r\n");
      out.write("                                    ' ' + 'm';\r\n");
      out.write("                            }\r\n");
      out.write("                            tooltipCoord = geom.getLastCoordinate();\r\n");
      out.write("                        }\r\n");
      out.write("                        measureTooltipElement.innerHTML = output;\r\n");
      out.write("                        measureTooltip.setPosition(tooltipCoord);\r\n");
      out.write("                    });\r\n");
      out.write("                }, this);\r\n");
      out.write("\r\n");
      out.write("            draw.on('drawend',\r\n");
      out.write("                function (evt) {\r\n");
      out.write("                    feature = evt.feature;\r\n");
      out.write("                    var subj = document.getElementById('subj').value\r\n");
      out.write("                    var cont = document.getElementById('cont').value\r\n");
      out.write("                    \r\n");
      out.write("                    \r\n");
      out.write("                    feature.setId(setId);\r\n");
      out.write("\r\n");
      out.write("                    var marker_html=\"\";\r\n");
      out.write("                    marker_html+= \"<span>작업 제목 :\"+subj+\"<hr>작업 내용 :\"+cont+\"<span>\";\r\n");
      out.write("\r\n");
      out.write("                    feature.set(\"subj\",marker_html);\r\n");
      out.write("                    feature.set(\"cont\",cont);\r\n");
      out.write("                    \r\n");
      out.write("                    measureTooltipElement.className = 'tooltip tooltip-static';\r\n");
      out.write("                    measureTooltip.setOffset([0, -7]);\r\n");
      out.write("                    \r\n");
      out.write("                    sketch = null;\r\n");
      out.write("                    \r\n");
      out.write("                    measureTooltipElement = null;\r\n");
      out.write("                    createMeasureTooltip();\r\n");
      out.write("                    ol.Observable.unByKey(listener);\r\n");
      out.write("                    \r\n");
      out.write("               \r\n");
      out.write("\r\n");
      out.write("                }, this);\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        function createHelpTooltip() {\r\n");
      out.write("            if (helpTooltipElement) {\r\n");
      out.write("                helpTooltipElement.parentNode.removeChild(helpTooltipElement);\r\n");
      out.write("            }\r\n");
      out.write("            helpTooltipElement = document.createElement('div');\r\n");
      out.write("            helpTooltipElement.className = 'tooltip hidden';\r\n");
      out.write("            helpTooltip = new ol.Overlay({\r\n");
      out.write("                element: helpTooltipElement,\r\n");
      out.write("                offset: [15, 0],\r\n");
      out.write("                positioning: 'center-left'\r\n");
      out.write("            });\r\n");
      out.write("            \r\n");
      out.write("                map2.addOverlay(helpTooltip); //커서에 달린 도움말\r\n");
      out.write("\r\n");
      out.write("            \r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        function createMeasureTooltip() {\r\n");
      out.write("            if (measureTooltipElement) {\r\n");
      out.write("                measureTooltipElement.parentNode.removeChild(measureTooltipElement);\r\n");
      out.write("            }\r\n");
      out.write("            measureTooltipElement = document.createElement('div');\r\n");
      out.write("            measureTooltipElement.className = 'tooltip tooltip-measure';\r\n");
      out.write("            setId =  Math.random();\r\n");
      out.write("            measureTooltip = new ol.Overlay({\r\n");
      out.write("            \tid:setId,\r\n");
      out.write("                element: measureTooltipElement,\r\n");
      out.write("                offset: [0, -15],\r\n");
      out.write("                positioning: 'bottom-center'\r\n");
      out.write("            });\r\n");
      out.write("            \r\n");
      out.write("                map2.addOverlay(measureTooltip); //측정할때 도움말\r\n");
      out.write("            \r\n");
      out.write("        \r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        mkSelect.onchange = function(){\r\n");
      out.write("        \tvar showmarker='';\r\n");
      out.write("            mksrc=mkSelect.value\r\n");
      out.write("            showmarker += \"<img src=\"+mksrc+\" />\";\r\n");
      out.write("            $('#showmarker').html(showmarker);\r\n");
      out.write("            map2.removeInteraction(draw);\r\n");
      out.write("            map2.getInteractions().getArray().forEach(function (i) {\r\n");
      out.write("                if (i.get(\"이벤트\") == \"선택\") {\r\n");
      out.write("                    \r\n");
      out.write("                        map2.removeInteraction(i);\r\n");
      out.write("                    \r\n");
      out.write("                }\r\n");
      out.write("            })\r\n");
      out.write("            addInteraction();\r\n");
      out.write("        }\r\n");
      out.write("        typeSelect.onchange = function () {\r\n");
      out.write("        \tlastSelect2 =typeSelect.value;\r\n");
      out.write("            map2.removeInteraction(draw);\r\n");
      out.write("            map2.getInteractions().getArray().forEach(function (i) {\r\n");
      out.write("                if (i.get(\"이벤트\") == \"선택\") {\r\n");
      out.write("                    \r\n");
      out.write("                        map2.removeInteraction(i);\r\n");
      out.write("                    \r\n");
      out.write("                }\r\n");
      out.write("            })\r\n");
      out.write("            addInteraction();\r\n");
      out.write("        };\r\n");
      out.write("\r\n");
      out.write("        addInteraction();\r\n");
      out.write("\r\n");
      out.write("            }\r\n");
      out.write("            }else if(mapLength !=1){\r\n");
      out.write("                alert(\"한가지의 지도만 선택하세요\");\r\n");
      out.write("                return false;\r\n");
      out.write("                \r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        //배경지도 선택\r\n");
      out.write("        function tileChange(){\r\n");
      out.write("            var tileLength = $('input:checkbox[id=\"vworldTile\"]:checked').length;\r\n");
      out.write("            var tileValue = $('input:checkbox[id=\"vworldTile\"]:checked').val();\r\n");
      out.write("\r\n");
      out.write("            if(map==null ){\r\n");
      out.write("                alert(\"지도를 선택해주세요.\");\r\n");
      out.write("                return false;\r\n");
      out.write("            }else if(tileLength != 1){\r\n");
      out.write("                alert(\"타일을 한가지 선택해 주세요\");\r\n");
      out.write("                return false;\r\n");
      out.write("            }else if(map !=null && tileLength ==1){\r\n");
      out.write("                alert(map+\" 지도에\"+ tileValue+\"입니다.\");\r\n");
      out.write("                \r\n");
      out.write("                \r\n");
      out.write("               if(tileValue==\"Satelite\"){\r\n");
      out.write("                    if(map=='map1'){\r\n");
      out.write("                        map1.getLayers().forEach(function (layer) {\r\n");
      out.write("                            if (layer.get(\"name\") == \"vworld\") {\r\n");
      out.write("                                layer.setSource(VworldSatellite)\r\n");
      out.write("                            }\r\n");
      out.write("                        })\r\n");
      out.write("                    }else if(map=='map2'){\r\n");
      out.write("                        map2.getLayers().forEach(function(layer){\r\n");
      out.write("                            if(layer.get(\"name\") ==\"vworld\"){\r\n");
      out.write("                                layer.setSource(VworldSatellite)\r\n");
      out.write("                            }\r\n");
      out.write("                        })\r\n");
      out.write("                    }\r\n");
      out.write("                }else if(tileValue==\"Base\"){\r\n");
      out.write("                    if(map=='map1'){\r\n");
      out.write("                        map1.getLayers().forEach(function (layer) {\r\n");
      out.write("                            if (layer.get(\"name\") == \"vworld\") {\r\n");
      out.write("                                layer.setSource(VworldBase)\r\n");
      out.write("                            }\r\n");
      out.write("                        })\r\n");
      out.write("                    }else if(map=='map2'){\r\n");
      out.write("                        map2.getLayers().forEach(function(layer){\r\n");
      out.write("                            if(layer.get(\"name\") ==\"vworld\"){\r\n");
      out.write("                                layer.setSource(VworldBase)\r\n");
      out.write("                            }\r\n");
      out.write("                        })\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("        //geoserver wms\r\n");
      out.write("        var sigWms = new ol.layer.Tile({\r\n");
      out.write("            opacity:0.5,\r\n");
      out.write("            \r\n");
      out.write("            source : new ol.source.TileWMS({\r\n");
      out.write("                url : 'http://localhost:8090/geoserver/cite/wms?service=WMS', // 1. 레이어 URL\r\n");
      out.write("                params : {\r\n");
      out.write("                    'VERSION' : '1.1.0', // 2. 버전\r\n");
      out.write("                    'LAYERS' : 'cite:Sigoracle', // 3. 작업공간:레이어 명\r\n");
      out.write("                    \r\n");
      out.write("                    'SRS' : 'EPSG:3857', // SRID\r\n");
      out.write("                    'FORMAT' : 'image/png' // 포맷\r\n");
      out.write("                },\r\n");
      out.write("                \r\n");
      out.write("                serverType : 'geoserver',\r\n");
      out.write("            })\r\n");
      out.write("        });\r\n");
      out.write("        var ctpWms = new ol.layer.Tile({\r\n");
      out.write("            opacity:0.5,\r\n");
      out.write("            source : new ol.source.TileWMS({\r\n");
      out.write("                url : 'http://localhost:8090/geoserver/cite/wms?service=WMS', // 1. 레이어 URL\r\n");
      out.write("                params : {\r\n");
      out.write("                    'VERSION' : '1.1.0', // 2. 버전\r\n");
      out.write("                    'LAYERS' : 'cite:CTPRVN_INFO', // 3. 작업공간:레이어 명\r\n");
      out.write("                    \r\n");
      out.write("                    'SRS' : 'EPSG:3857', // SRID\r\n");
      out.write("                    'FORMAT' : 'image/png' // 포맷\r\n");
      out.write("                },\r\n");
      out.write("                \r\n");
      out.write("                serverType : 'geoserver',\r\n");
      out.write("            })\r\n");
      out.write("        });\r\n");
      out.write("        var iconWms = new ol.layer.Tile({\r\n");
      out.write("            opacity:1,\r\n");
      out.write("            scale:10,\r\n");
      out.write("            source : new ol.source.TileWMS({\r\n");
      out.write("                url : 'http://localhost:8090/geoserver/cite/wms?service=WMS', // 1. 레이어 URL\r\n");
      out.write("                params : {\r\n");
      out.write("                    'VERSION' : '1.1.0', // 2. 버전\r\n");
      out.write("                    'LAYERS' : 'cite:SQLicon', // 3. 작업공간:레이어 명\r\n");
      out.write("                    \r\n");
      out.write("                    'SRS' : 'EPSG:3857', // SRID\r\n");
      out.write("                    'FORMAT' : 'image/png' // 포맷\r\n");
      out.write("                },\r\n");
      out.write("                \r\n");
      out.write("                serverType : 'geoserver',\r\n");
      out.write("            })\r\n");
      out.write("        });\r\n");
      out.write("           \r\n");
      out.write("\r\n");
      out.write("    function sig(){\r\n");
      out.write("        if(map=='map1'){\r\n");
      out.write("            map1.addLayer(sigWms);\r\n");
      out.write("        }else if(map=='map2'){\r\n");
      out.write("            map2.addLayer(sigWms);\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("\tfunction ctp(){\r\n");
      out.write("        if(map=='map1'){\r\n");
      out.write("            map1.addLayer(ctpWms);\r\n");
      out.write("        }else if(map=='map2'){\r\n");
      out.write("            map2.addLayer(ctpWms);\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("\tfunction iconOn(){\r\n");
      out.write("        if(map=='map1'){\r\n");
      out.write("            map1.addLayer(iconWms);\r\n");
      out.write("       \r\n");
      out.write("                var view = map1.getView();\r\n");
      out.write("                map1.on('singleclick', function (evt) {\r\n");
      out.write("                document.getElementById('info').innerHTML = '';\r\n");
      out.write("                    var viewResolution = /** @type {number} */ (view.getResolution());\r\n");
      out.write("                    var source = iconWms.getSource();\r\n");
      out.write("                    var url = source.getFeatureInfoUrl(\r\n");
      out.write("                        evt.coordinate,\r\n");
      out.write("                        viewResolution,\r\n");
      out.write("                        'EPSG:3857',\r\n");
      out.write("                        {'INFO_FORMAT': 'text/html'}\r\n");
      out.write("                    );\r\n");
      out.write("                    \r\n");
      out.write("                    if (url) {\r\n");
      out.write("                        fetch(url)\r\n");
      out.write("                        .then((response) => response.text())\r\n");
      out.write("                        .then((html) => {\r\n");
      out.write("                            document.getElementById('info').innerHTML = html;\r\n");
      out.write("                        });\r\n");
      out.write("                    }\r\n");
      out.write("                });\r\n");
      out.write("        }else if(map=='map2'){\r\n");
      out.write("            map2.addLayer(iconWms);\r\n");
      out.write("       \r\n");
      out.write("                var view = map2.getView();\r\n");
      out.write("                map2.on('singleclick', function (evt) {\r\n");
      out.write("                document.getElementById('info').innerHTML = '';\r\n");
      out.write("                    var viewResolution = /** @type {number} */ (view.getResolution());\r\n");
      out.write("                    var source = iconWms.getSource();\r\n");
      out.write("                    var url = source.getFeatureInfoUrl(\r\n");
      out.write("                        evt.coordinate,\r\n");
      out.write("                        viewResolution,\r\n");
      out.write("                        'EPSG:3857',\r\n");
      out.write("                        {'INFO_FORMAT': 'text/html'}\r\n");
      out.write("                    );\r\n");
      out.write("                    \r\n");
      out.write("                    if (url) {\r\n");
      out.write("                        fetch(url)\r\n");
      out.write("                        .then((response) => response.text())\r\n");
      out.write("                        .then((html) => {\r\n");
      out.write("                            document.getElementById('info').innerHTML = html;\r\n");
      out.write("                        });\r\n");
      out.write("                    }\r\n");
      out.write("                });\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("    }\r\n");
      out.write("    function sigdelete(){\r\n");
      out.write("        if(map=='map1'){\r\n");
      out.write("            map1.removeLayer(sigWms);  \r\n");
      out.write("        }else if(map=='map2'){\r\n");
      out.write("            map2.removeLayer(sigWms);\r\n");
      out.write("            }\r\n");
      out.write("                   \r\n");
      out.write("        }\r\n");
      out.write("    function ctpdelete(){\r\n");
      out.write("        if(map=='map1'){\r\n");
      out.write("            map1.removeLayer(ctpWms);  \r\n");
      out.write("        }else if(map=='map2'){\r\n");
      out.write("            map2.removeLayer(ctpWms);\r\n");
      out.write("            }          \r\n");
      out.write("      }\r\n");
      out.write("    function iconOff(){\r\n");
      out.write("        if(map=='map1'){\r\n");
      out.write("            map1.removeLayer(iconWms);  \r\n");
      out.write("        }else if(map=='map2'){\r\n");
      out.write("            map2.removeLayer(iconWms);\r\n");
      out.write("            }            \r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    /////2개의 지도생성 /////\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    map1 = new ol.Map({\r\n");
      out.write("            controls: ol.control.defaults().extend([\r\n");
      out.write("            mouseControlCoordinate2\r\n");
      out.write("               ]),\r\n");
      out.write("            layers: [\r\n");
      out.write("                new ol.layer.Tile({\r\n");
      out.write("                    source: new ol.source.OSM(),\r\n");
      out.write("                    name: \"OSM\",\r\n");
      out.write("                    \r\n");
      out.write("                }), new ol.layer.Tile({\r\n");
      out.write("                    source: VworldSatellite,\r\n");
      out.write("                    name: \"vworld\",\r\n");
      out.write("                    \r\n");
      out.write("                }), new ol.layer.Tile({\r\n");
      out.write("                    source: VworldHybrid,\r\n");
      out.write("                    name: \"hybrid\",\r\n");
      out.write("                    \r\n");
      out.write("                }),\r\n");
      out.write("            \r\n");
      out.write("                \r\n");
      out.write("                vector,\r\n");
      out.write("            ],\r\n");
      out.write("           \r\n");
      out.write("            target: 'map1',\r\n");
      out.write("            view: new ol.View({\r\n");
      out.write("                center: ol.proj.transform([14324890.296973, 4277891.7105477], 'EPSG:3857', 'EPSG:900913'),\r\n");
      out.write("                zoom: 16,\r\n");
      out.write("                minZoom: 0,\r\n");
      out.write("                maxZoom: 21\r\n");
      out.write("            })\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        map2 = new ol.Map({\r\n");
      out.write("            controls: ol.control.defaults().extend([\r\n");
      out.write("            mouseControlCoordinate\r\n");
      out.write("               \r\n");
      out.write("        ]),\r\n");
      out.write("            layers: [\r\n");
      out.write("                new ol.layer.Tile({\r\n");
      out.write("                    source: new ol.source.OSM(),\r\n");
      out.write("                    name: \"OSM\",\r\n");
      out.write("                    \r\n");
      out.write("                })\r\n");
      out.write("                , new ol.layer.Tile({\r\n");
      out.write("                    source: VworldSatellite,\r\n");
      out.write("                    name: \"vworld\",\r\n");
      out.write("                    \r\n");
      out.write("                }), new ol.layer.Tile({\r\n");
      out.write("                    source: VworldHybrid,\r\n");
      out.write("                    name: \"hybrid\",\r\n");
      out.write("                    \r\n");
      out.write("                }),\r\n");
      out.write("            \r\n");
      out.write("                \r\n");
      out.write("                vector2,\r\n");
      out.write("            ],\r\n");
      out.write("           // overlays: [overlay],\r\n");
      out.write("            target: 'map2',\r\n");
      out.write("            view: new ol.View({\r\n");
      out.write("                center: ol.proj.transform([14324890.296973, 4277891.7105477], 'EPSG:3857', 'EPSG:900913'),\r\n");
      out.write("                zoom: 16,\r\n");
      out.write("                minZoom: 0,\r\n");
      out.write("                maxZoom: 21\r\n");
      out.write("            })\r\n");
      out.write("        });\r\n");
      out.write("        var markerSource;\r\n");
      out.write("        var markerSource_2;\r\n");
      out.write("        var search = function(){\r\n");
      out.write("            let imgLength = $('input:checkbox[id=\"mkImg\"]:checked').length;\r\n");
      out.write("            let imgsrc = $('input:checkbox[id=\"mkImg\"]:checked').val();\r\n");
      out.write("\r\n");
      out.write("            if(map=='map1'){\r\n");
      out.write("                if(markerSource==null){\t// 첫 검색시 소스 생성\r\n");
      out.write("                \r\n");
      out.write("                markerSource = new ol.source.Vector();\r\n");
      out.write("                \r\n");
      out.write("            \r\n");
      out.write("                }else if(markerSource !=null){ //두번째 검색시 이전 검색의 소스와 마커 스타일 초기화\r\n");
      out.write("                \r\n");
      out.write("                markerLayer.getSource().clear();\r\n");
      out.write("                markerLayer.setStyle();\r\n");
      out.write("                \r\n");
      out.write("                }\r\n");
      out.write("                if(markerSource2 != null){\t//이전 검색시 이동하여 생성한 마커삭제]\r\n");
      out.write("                    markerLayer2.getSource().clear();\r\n");
      out.write("                    \r\n");
      out.write("                }\r\n");
      out.write("                \r\n");
      out.write("            }else if(map =='map2'){\r\n");
      out.write("                if(markerSource_2==null){\r\n");
      out.write("                \r\n");
      out.write("                markerSource_2 = new ol.source.Vector();\r\n");
      out.write("                \r\n");
      out.write("            \r\n");
      out.write("                }else if(markerSource_2 !=null){\r\n");
      out.write("                \r\n");
      out.write("                markerLayer_2.getSource().clear();\r\n");
      out.write("                markerLayer_2.setStyle();\r\n");
      out.write("                }\r\n");
      out.write("                if(markerSource2_2 != null){\r\n");
      out.write("                    markerLayer2_2.getSource().clear();\r\n");
      out.write("                }\r\n");
      out.write("                \r\n");
      out.write("            }\r\n");
      out.write("            \r\n");
      out.write("            \r\n");
      out.write("            if(map=='map1'){\r\n");
      out.write("                markerSource.set(\"name\",\"마커레이어\");\r\n");
      out.write("            }else if(map=='map2'){\r\n");
      out.write("                markerSource_2.set(\"name\",\"마커레이어\");\r\n");
      out.write("            }\r\n");
      out.write("            if(imgLength != 1){\r\n");
      out.write("                                alert('마커를 한개만 선택하여주세요.');\r\n");
      out.write("                                return false;\r\n");
      out.write("                            }else if(imgLength =1){\r\n");
      out.write("                                //style을 활용해서, point의 style을 변경한다.\r\n");
      out.write("                                var markerStyle = new ol.style.Style({\r\n");
      out.write("                                    \r\n");
      out.write("                                    image: new ol.style.Icon({ //마커 이미지\r\n");
      out.write("                                        opacity: 1, //투명도 1=100% \r\n");
      out.write("                                        scale: 1, //크기 1=100%\r\n");
      out.write("\r\n");
      out.write("                                        //marker 이미지, 해당 point를 marker로 변경한다.\r\n");
      out.write("                                        src: imgsrc\r\n");
      out.write("                                        //'https://openlayers.org/en/v3.20.1/examples/data/icon.png'\r\n");
      out.write("                                    }),\r\n");
      out.write("                                    //html의 css, z-index 기능이다.\r\n");
      out.write("                                    zindex: 1001\r\n");
      out.write("                                });\r\n");
      out.write("                            }        \r\n");
      out.write("    \t\t$.ajax({\r\n");
      out.write("    \t\t\ttype: \"get\",\r\n");
      out.write("    \t\t\turl: \"https://api.vworld.kr/req/search\",\r\n");
      out.write("    \t\t\tdata : $('#searchForm').serialize(),\r\n");
      out.write("    \t\t\tdataType: 'jsonp',\r\n");
      out.write("    \t\t\tasync: false,\r\n");
      out.write("    \t\t\tsuccess: function(data) {\r\n");
      out.write("    \t\t\t\tvar features = new Array();\r\n");
      out.write("    \t\t\t\tif(data.response.status ==\"NOT_FOUND\"){\r\n");
      out.write("    \t\t\t\t\talert(\"검색결과가 없습니다.\");\r\n");
      out.write("    \t\t\t\t}else{\r\n");
      out.write("    \t\t\t\t\t$('p.notice').show();\r\n");
      out.write("    \t\t\t\t\tvar result_html =\"\";\r\n");
      out.write("                        \r\n");
      out.write("    \t\t\t\t\t\r\n");
      out.write("    \t\t\t\t\tfor(var o in data.response.result.items){ \r\n");
      out.write("                            var marker_html =\"\";\r\n");
      out.write("                            if(o==0){\t\t\t//검색 결과가있을시 검색결과의 첫번째 값 좌표로 이동\r\n");
      out.write("                            \tif(map =='map1'){\r\n");
      out.write("                            \t\tmap1.getView().setCenter([data.response.result.items[o].point.x*1, data.response.result.items[o].point.y*1 ]); \r\n");
      out.write("                \t\t\t\t    map1.getView().setZoom(17); \r\n");
      out.write("                            \t}else if(map =='map2'){\r\n");
      out.write("                            \t\tmap2.getView().setCenter([data.response.result.items[o].point.x*1, data.response.result.items[o].point.y*1 ]); // 지도 이동\r\n");
      out.write("                \t\t\t\t    map2.getView().setZoom(17); // 줌레벨 설정\r\n");
      out.write("                            \t}\r\n");
      out.write("    \t\t\t\t\t\t\r\n");
      out.write("                            \t\r\n");
      out.write("                            \t//move(data.response.result.items[o].point.x*1,data.response.result.items[o].point.y*1);\r\n");
      out.write("    \t\t\t\t\t}\r\n");
      out.write("    \t\t\t\t\t\r\n");
      out.write("    \t\t\t\t\t\t\r\n");
      out.write("                            var x = data.response.result.items[o].point.x*1;\r\n");
      out.write("                            var y = data.response.result.items[o].point.y*1\r\n");
      out.write("                            var point_feature = new ol.Feature({\r\n");
      out.write("                                geometry: new ol.geom.Point([x, y]).transform('EPSG:900913', 'EPSG:3857')\r\n");
      out.write("                            });\r\n");
      out.write("                            \r\n");
      out.write("                            var title = data.response.result.items[o].address.bldnm\r\n");
      out.write("                            var cont = \"2\";  //내용이없을경우 팝업 제외하기위하여 추가 검색시 생성되는 마커는 모두 내용이 있음으로 cont 내용을 추가함\r\n");
      out.write("    \t\t\t\t\t\tvar contents = data.response.result.items[o].address.road\r\n");
      out.write("                            marker_html += \"<span> 장소 :\"+title+\"<hr>도로명 :\"+ contents+\"</span>\";\r\n");
      out.write("                            point_feature.set(\"subj\",marker_html);\r\n");
      out.write("                            point_feature.set(\"cont\",cont);\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("                                //markerSource에 등록한 point를 담는다. addFeature를 이용해서, 여러개의 point를 source에 담는다.\r\n");
      out.write("                                if(map=='map1'){\r\n");
      out.write("                                    markerSource.addFeature(point_feature);\r\n");
      out.write("                                // 마커 레이어 생성\r\n");
      out.write("                                    markerLayer = new ol.layer.Vector({\r\n");
      out.write("                                        source: markerSource, //마커 feacture들\r\n");
      out.write("                                        style: markerStyle //마커 스타일\r\n");
      out.write("                                    });\r\n");
      out.write("                                }else if(map=='map2'){\r\n");
      out.write("                                    markerSource_2.addFeature(point_feature);\r\n");
      out.write("                                    // 마커 레이어 생성\r\n");
      out.write("                                    markerLayer_2 = new ol.layer.Vector({\r\n");
      out.write("                                        source: markerSource_2, //마커 feacture들\r\n");
      out.write("                                        style: markerStyle //마커 스타일\r\n");
      out.write("                                    });\r\n");
      out.write("                                }\r\n");
      out.write("                                \r\n");
      out.write("                                \r\n");
      out.write("                          var roadText=escape(data.response.result.items[o].address.road);\r\n");
      out.write("                          var bldnmText=escape(data.response.result.items[o].address.bldnm);\r\n");
      out.write("                         \r\n");
      out.write("                                result_html += \"<hr><li><p onclick='move(\"+data.response.result.items[o].point.x+\",\"+\r\n");
      out.write("                                \t\tdata.response.result.items[o].point.y+\r\n");
      out.write("                                \t\t\",\"+\"\\\"\"+roadText+\"\\\",\"+\"\\\"\"+bldnmText+\"\\\"\"+\r\n");
      out.write("    \t\t\t\t\t\t\t\")'> 도로명: \"+ data.response.result.items[o].address.road +\r\n");
      out.write("    \t\t\t\t\t\t\t\" 지번: \"+ data.response.result.items[o].address.parcel +\"  </p></li>\";\r\n");
      out.write("    \t\t\t\t\t\t\t\r\n");
      out.write("    \t\t\t\t\t}\r\n");
      out.write("    \t\t\t\t\t\r\n");
      out.write("                        if(map =='map1'){\r\n");
      out.write("    \t\t\t\t\t    map1.addLayer(markerLayer);\r\n");
      out.write("                        }else if(map =='map2'){\r\n");
      out.write("                            map2.addLayer(markerLayer_2);\r\n");
      out.write("                        }\r\n");
      out.write("\r\n");
      out.write("    \t\t\t\t\t$('#result_ajax').html(result_html);  //result_ajax 라는 id 값이 있는곳의 html을 수정한다 \r\n");
      out.write("    \t\t\t\t\t$('#result_count').text(data.response.record.total+\"건이 검색되었습니다.\");\r\n");
      out.write("    \t\t\t\t\talert(data.response.record.total+\"건이 검색되었습니다.\");\r\n");
      out.write("    \t\t\t\t}\r\n");
      out.write("    \t\t\t\t\r\n");
      out.write("    \t\t\t\t\r\n");
      out.write("    \t\t\t},\r\n");
      out.write("    \t\t\tcomplete:function(){\r\n");
      out.write("    \t\t\t\t\r\n");
      out.write("    \t\t\t},\r\n");
      out.write("    \t\t\terror: function(xhr, stat, err) {}\r\n");
      out.write("    \t\t});\r\n");
      out.write("    \t\t\r\n");
      out.write("    \t}\r\n");
      out.write("    var markerSource2;\r\n");
      out.write("    var markerSource2_2;\r\n");
      out.write("\r\n");
      out.write("\tvar move = function(x,y,roadText,bldnmText){\r\n");
      out.write("        var road=unescape(roadText);\r\n");
      out.write("        var bldnm=unescape(bldnmText);\r\n");
      out.write("        var markerStyle2 = new ol.style.Style({\r\n");
      out.write("                \r\n");
      out.write("                image: new ol.style.Icon({ //마커 이미지\r\n");
      out.write("                    opacity: 1, //투명도 1=100% \r\n");
      out.write("                    scale: 1, //크기 1=100%\r\n");
      out.write("                    //marker 이미지, 해당 point를 marker로 변경한다.\r\n");
      out.write("                    src: 'https://openlayers.org/en/v3.20.1/examples/data/icon.png'\r\n");
      out.write("                    //'https://openlayers.org/en/v3.20.1/examples/data/icon.png'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png\r\n");
      out.write("                }),\r\n");
      out.write("                //html의 css, z-index 기능이다.\r\n");
      out.write("                zindex: 1001\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("            var point_feature2 = new ol.Feature({\r\n");
      out.write("                geometry: new ol.geom.Point([x, y]).transform('EPSG:900913', 'EPSG:3857')\r\n");
      out.write("\t\t    });\r\n");
      out.write("\t\t    var marker_html=\"\";\r\n");
      out.write("\t\t    marker_html += \"<span> 장소 :\"+bldnm+\"<hr>도로명 :\"+ road+\"</span>\";\r\n");
      out.write("\t\t    var cont = \"2\";  //내용이없을경우 팝업 제외하기위하여 추가 검색시 생성되는 마커는 모두 내용이 있음으로 cont 내용을 추가함\r\n");
      out.write("\t\t\t\r\n");
      out.write("            point_feature2.set(\"subj\",marker_html);\r\n");
      out.write("            point_feature2.set(\"cont\",cont);    \r\n");
      out.write("        \t\r\n");
      out.write("        if(map =='map1'){\r\n");
      out.write("        \t\r\n");
      out.write("            map1.getView().setCenter([ x, y ]); // 지도 이동\r\n");
      out.write("\t\t    map1.getView().setZoom(17); // 줌레벨 설정\r\n");
      out.write("\t\t    \r\n");
      out.write("\t\t    if(markerSource==null){\r\n");
      out.write("\t            markerSource = new ol.source.Vector();\r\n");
      out.write("\t\r\n");
      out.write("\t        }else if(markerSource !=null){\r\n");
      out.write("\t            \r\n");
      out.write("\t            markerLayer.getSource().clear();\r\n");
      out.write("\t        }\r\n");
      out.write("            if(markerSource2==null){\r\n");
      out.write("                markerSource2 = new ol.source.Vector();\r\n");
      out.write("            }else if(markerSource2 != null){\r\n");
      out.write("                markerLayer2.getSource().clear();\r\n");
      out.write("            }\r\n");
      out.write("\t        markerSource2.set(\"name\",\"마커레이어\");\r\n");
      out.write("\t        \r\n");
      out.write("\t\r\n");
      out.write("            //markerSource에 등록한 point를 담는다. addFeature를 이용해서, 여러개의 point를 source에 담는다.\r\n");
      out.write("            markerSource2.addFeature(point_feature2);\r\n");
      out.write("                    \r\n");
      out.write("            // 마커 레이어 생성\r\n");
      out.write("            markerLayer2 = new ol.layer.Vector({\r\n");
      out.write("                source: markerSource2, //마커 feacture들\r\n");
      out.write("                style: markerStyle2 //마커 스타일\r\n");
      out.write("                });\r\n");
      out.write("             \r\n");
      out.write("            map1.addLayer(markerLayer2);\r\n");
      out.write("\r\n");
      out.write("        }else if(map =='map2'){\r\n");
      out.write("            map2.getView().setCenter([ x, y ]); // 지도 이동\r\n");
      out.write("\t\t    map2.getView().setZoom(17); // 줌레벨 설정\r\n");
      out.write("\t\t    \r\n");
      out.write("\t\t    if(markerSource_2==null){\r\n");
      out.write("\t            markerSource = new ol.source.Vector();\r\n");
      out.write("\t            \r\n");
      out.write("\t        }else if(markerSource_2 !=null){\r\n");
      out.write("\t            markerLayer_2.getSource().clear(); //검색결과시 생성된 마커삭제\r\n");
      out.write("\t        }\r\n");
      out.write("            if(markerSource2_2==null){\r\n");
      out.write("                markerSource2_2 = new ol.source.Vector(); //이동하는 곳에 마커 생성\r\n");
      out.write("            }else if(markerSource2_2 != null){\r\n");
      out.write("                markerLayer2_2.getSource().clear();   //이동했던 곳에 마커 삭제\r\n");
      out.write("            }\r\n");
      out.write("\t        markerSource2_2.set(\"name\",\"마커레이어\");\r\n");
      out.write("\t    \r\n");
      out.write("            //markerSource에 등록한 point를 담는다. addFeature를 이용해서, 여러개의 point를 source에 담는다.\r\n");
      out.write("            markerSource2_2.addFeature(point_feature2);\r\n");
      out.write("                    \r\n");
      out.write("            // 마커 레이어 생성\r\n");
      out.write("            markerLayer2_2 = new ol.layer.Vector({\r\n");
      out.write("                source: markerSource2_2, //마커 feacture들\r\n");
      out.write("                style: markerStyle2 //마커 스타일\r\n");
      out.write("                });\r\n");
      out.write("             \r\n");
      out.write("            map2.addLayer(markerLayer2_2);\r\n");
      out.write("        }\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    </script>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
