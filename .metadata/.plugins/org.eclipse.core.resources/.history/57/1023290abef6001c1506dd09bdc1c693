
var VworldHybrid = new ol.source.XYZ({
    url: 'http://api.vworld.kr/req/wmts/1.0.0/10036FCE-3940-374C-B2ED-E6FBDF47CFA9/Hybrid/{z}/{y}/{x}.png'
}); //문자 타일 레이어

var VworldSatellite = new ol.source.XYZ({
    url: 'http://api.vworld.kr/req/wmts/1.0.0/10036FCE-3940-374C-B2ED-E6FBDF47CFA9/Satellite/{z}/{y}/{x}.jpeg'
    
}); //항공사진 레이어 타일

var VworldBase = new ol.source.XYZ({
    url: 'http://api.vworld.kr/req/wmts/1.0.0/10036FCE-3940-374C-B2ED-E6FBDF47CFA9/Base/{z}/{y}/{x}.png'

});

//지도를 불러오기 위함.
var map1s;
var map2s;

/**
 * 지도를 생성 해주는 함수
 * @param {object} option 지도 생성시에 필요한 옵션 값
 * @returns Map
 */
function createMap(option) {
    var map = new ol.Map({
        controls: ol.control.defaults().extend([
            option.mouseControlCoordinate
        ]),
        layers: [
            new ol.layer.Tile({
                source: new ol.source.OSM(),
                name: "OSM",
                
            }), new ol.layer.Tile({
                source: VworldSatellite,
                name: "vworld",
                
            }), new ol.layer.Tile({
                source: VworldHybrid,
                name: "hybrid",
                
            }),
        ],
        target: option.selecter,
        view: new ol.View({
            center: ol.proj.transform([14324890.296973, 4277891.7105477], 'EPSG:3857', 'EPSG:900913'),
            zoom: 16,
            minZoom: 0,
            maxZoom: 21
        })
    });

    return map;
}

function mapMakrerCreate(map) {
    
    map.on('click', function(evt) {
        var coordinate = evt.coordinate;
        var x = coordinate[0];
        var y = coordinate[1];
        
        var markerOn = $('input:radio[name="selcetType"]:checked').val();
        var iconSrc = $('input:radio[name="mkType"]:checked').val();
        
        if (markerOn == 'MarkerOn') {  //마커찍기

            var subj = document.getElementById('subj').value
            var cont = document.getElementById('cont').value
            var marker_html="";
            marker_html+= "<span>작업 제목 :"+subj+"<hr>작업 내용 :"+cont+"<span>";
            
            
            var markerFeature = new ol.Feature({
                geometry: new ol.geom.Point([x, y])
            });
            
            var markerStyle = new ol.style.Style({
                image: new ol.style.Icon({
                    anchor: [0.5, 0.5],
                    src: iconSrc
                })
            });
            setId =  Math.random();
            console.log(setId);
            markerFeature.setStyle(markerStyle);
            markerFeature.setId(setId);
            markerFeature.set("subj",marker_html);
            markerFeature.set("cont",cont);

            var markerSource = new ol.source.Vector({
                features: [markerFeature]
            });

            var markerLayer = new ol.layer.Vector({
                source: markerSource,
            });
            
            map.addLayer(markerLayer);
        }
        
    });
}


// 배경지도 함수

function tileChange(){

    var tileValue = $('input:radio[name="tile"]:checked').val();
                    
    //var tileLength = $('input:checkbox[id="vworldTile"]:checked').length;
    //var tileValue = $('input:checkbox[id="vworldTile"]:checked').val();
    map1b = $('input:checkbox[id="map1b"]:checked').val();
    map2b = $('input:checkbox[id="map2b"]:checked').val();
    
    
       if(tileValue=="Satelite"){
            if(map1b != null){
                map1s.getLayers().forEach(function (layer) {
                    if (layer.get("name") == "vworld") {
                        layer.setSource(VworldSatellite)
                    }
                })
            }
            if(map2b != null){
                map2s.getLayers().forEach(function(layer){
                    if(layer.get("name") =="vworld"){
                        layer.setSource(VworldSatellite)
                    }
                })
            }
        }else if(tileValue=="Base"){
            if(map1b != null){
                map1s.getLayers().forEach(function (layer) {
                    if (layer.get("name") == "vworld") {
                        layer.setSource(VworldBase)
                    }
                })
            }
            if(map2b != null){
                map2s.getLayers().forEach(function(layer){
                    if(layer.get("name") =="vworld"){
                        layer.setSource(VworldBase)
                    }
                })
            }
        }

    }

    //-------------마우스핸들러------------------//


function mapControl1(map){
    
    
    
    
    //map=map1s;
    
    function pointerMoveHandler(event){
        
        
        var features = map.getFeaturesAtPixel(event.pixel);
        if (!features) {
                // 마우스 위치에 어떠한 Feature도 없음
            return;
            }
            // 마우스 포인터 위치에 존재하는 Feature 중 첫번째(features[0])
        var properties = features[0].getProperties();  
            // properties 객체가 object 타입의 Feature에 대한 속성값임
            
            
        }
        
        
        var sketch;
        var helpTooltipElement;
        var helpTooltip;
        var measureTooltipElement;
        var measureTooltip;
        var continuePolygonMsg = 'polygon을 그리는 중입니다.';
        var continueLineMsg = 'Line을 그리는 중입니다.';
        

            
        var pointerMoveHandler = function (evt) {
            if (evt.dragging) {
                return;
                }
                  
            var helpMsg ='지도를 이동하세요.';
            

            if (sketch) {
                var geom = (sketch.getGeometry());
                
                if (geom instanceof ol.geom.Polygon) {
                    helpMsg = continuePolygonMsg;
                    }else if (geom instanceof ol.geom.LineString) {
                        helpMsg = continueLineMsg;
                    }
            }
            helpTooltipElement.innerHTML = helpMsg;
            helpTooltip.setPosition(evt.coordinate);

            helpTooltipElement.classList.remove('hidden');

                
            };
    var typeSelect = document.getElementById('type');
    //var mkSelect = document.getElementById('mkType');
        
        
        


    var draw; // global so we can remove it later


    var formatLength = function (line) {
        
        var length = ol.sphere.getLength(line);
        var output;
        if (length > 100) {
            output = (Math.round(length / 1000 * 100) / 100) +
                ' ' + 'km';
        } else {
            output = (Math.round(length * 100) / 100) +
                ' ' + 'm';
        }
        return output;
    };


    var formatArea = function (polygon) {
        var area = ol.sphere.getArea(polygon);
        var output;
        if (area > 10000) {
            output = (Math.round(area / 1000000 * 100) / 100) +
                ' ' + 'km<sup>2</sup>';
        } else {
            output = (Math.round(area * 100) / 100) +
                ' ' + 'm<sup>2</sup>';
        }
        return output;
    };


            
    helpTooltip = new ol.Overlay({
            element: helpTooltipElement,
            offset: [15, 0],
            positioning: 'center-left'
        });

          
    //포인트 무브
    map.on('pointermove', pointerMoveHandler);
    map.getViewport().addEventListener('mouseout', function () {
        helpTooltipElement.classList.add('hidden');
    });

    

    function addInteraction() {
        var type = '';
        if (typeSelect.value == 'area') {
            type = 'Polygon';
            $("#selectOption").hide();
            
            $("input:radio[name='selcetType']:radio[value='0']").prop('checked', true); // 선택하기    
            
        } else if (typeSelect.value == 'length') {
            type = 'LineString';
            $("#selectOption").hide();
            
            $("input:radio[name='selcetType']:radio[value='0']").prop('checked', true); // 선택하기  
                

        } else if (typeSelect.value == 'Circle') {
            type = 'Circle';
        /* }else if (typeSelect.value == 'Point') {
            type = 'Point';
         */   
        } else if (typeSelect.value == 'Select') {
            $("#selectOption").show();
            var select; 
            
            select = new ol.interaction.Select({
                condition: ol.events.condition.click
            })
            select.set("이벤트", "선택");
            select.on("select", function (evt) {
            
                var length = evt.target.getFeatures().getLength();
                if (length > 0) {
                    var popup_Test ="";
                    subj = evt.target.getFeatures().getArray()[0].get("subj");
                    cont = evt.target.getFeatures().getArray()[0].get("cont");
                    
                    
                    var features = evt.target.getFeatures().getArray();
                    var feature = features[0]
                    var getLayer = select.getLayer(feature); //마커 옵션중 마커를 변경하기위해선 레이어를 계속 추가해야함으로 선택된 feature의 레이어를 찾아야함.
                    
                    var deleteMk = $('input:radio[name="selcetType"]:checked').val();
                    
                    if(deleteMk =='deleteMarker'){
                        
                        var ftId=feature.getId();	//생성된 feautre 아이디를 구함
                        
                        if(ftId !=null){	//search 해서 생성된 마커에는 오버레이가 존재할수 없기때문에 id가 없음
                            var olId=map.getOverlayById(ftId);	//면적넓이와 길이 오버레이를 feautre id로 찾아냄
                            map.getOverlays().getArray().slice(0).forEach(function(measureTooltip) {
                                map.removeOverlay(olId); //해당 feature의 오버레이를 삭제
                            });
                        }

                        getLayer.getSource().removeFeature(feature);//선택된 feautre의 레이어 중 선택된 feature을 삭제

                        
                    }
                    if(deleteMk!='deleteMarker'){
                        if(cont != ''){
                            $('#popupTest').show();
                            $("#popupTest").css("left", "14%");
                        }else if(cont ==''){
                            $('#popupTest').hide();
                        }
                    }
                    
                    
                    popup_Test += '<p style="float:right;"><a href="#" onclick="javascript:popup_delete();">닫기</a><p>'+subj;
                        $('#popupTest').html(popup_Test);
                        
                    
                }
            })
                map.addInteraction(select);
                return;
        
        }
        //let imgsrc = mkSelect.value
        
        newSource = new ol.source.Vector({
                id: "sourceId"
                });
                newSource.set("name", "sourceName");

        newVector = new ol.layer.Vector({
                id: "vectorId",
                source: newSource,
                style: new ol.style.Style({
                    
                    fill: new ol.style.Fill({
                        color: 'rgba(52, 0, 0, 0.35)'
                    }),
                    stroke: new ol.style.Stroke({
                        color: '#000',
                        width: 2
                    })
                    /*,
                    image: new ol.style.Icon(({
                    anchor: [0.5, 10],
                    anchorXUnits: 'fraction',
                    anchorYUnits: 'pixels',
                    src: imgsrc
                    }))*/
                })
            });
            

        newVector.set("name", "vectorName");
        newVector.setZIndex(1000);
    
        draw = new ol.interaction.Draw({
            source: newSource,
            type: type,
            style: new ol.style.Style({
                fill: new ol.style.Fill({
                    color: 'rgba(255, 255, 255, 0.2)'
                }),
                stroke: new ol.style.Stroke({
                    color: 'rgba(0, 0, 0, 0.5)',
                    lineDash: [10, 10],
                    width: 5
                }),
                image: new ol.style.Circle({
                    radius: 5,
                    stroke: new ol.style.Stroke({
                        color: 'rgba(0, 0, 0, 0.7)'
                    }),
                    fill: new ol.style.Fill({
                        color: 'rgba(255, 255, 255, 0.2)'
                    })
                })
            })
        });
        map.addLayer(newVector);
        map.addInteraction(draw);
    
        

        createMeasureTooltip();
        createHelpTooltip();

        var listener;
        draw.on('drawstart',
            function (evt) {
                // set sketch
                sketch = evt.feature;
                var tooltipCoord = evt.coordinate;

                listener = sketch.getGeometry().on('change', function (evt) {
                    var geom = evt.target;
                    var output;
                    if (geom instanceof ol.geom.Polygon) {
                        output = formatArea(geom);
                        tooltipCoord = geom.getInteriorPoint().getCoordinates();
                    } else if (geom instanceof ol.geom.LineString) {
                        output = formatLength(geom);
                        tooltipCoord = geom.getLastCoordinate();
                    } else if (geom instanceof ol.geom.Circle) {//거리계산 구현
                        var length = ol.sphere.getDistance(ol.proj.transform(geom.getCenter(), 'EPSG:900913', 'EPSG:3857'), ol.proj.transform(geom.getLastCoordinate(), 'EPSG:900913', 'EPSG:3857'), 6378137)
                        if (length > 100) {
                            output = (Math.round(length / 1000 * 100) / 100) +
                                ' ' + 'km';
                        } else {
                            output = (Math.round(length * 100) / 100) +
                                ' ' + 'm';
                        }
                        tooltipCoord = geom.getLastCoordinate();
                    }
                    measureTooltipElement.innerHTML = output;
                    measureTooltip.setPosition(tooltipCoord);
                });
            }, this);

        draw.on('drawend',
            function (evt) {
                feature = evt.feature;
                var subj = document.getElementById('subj').value
                var cont = document.getElementById('cont').value

                var marker_html="";
                marker_html+= "<span>작업 제목 :"+subj+"<hr>작업 내용 :"+cont+"<span>";
                
                feature.setId(setId);

                feature.set("subj",marker_html);
                feature.set("cont",cont);
                $("#subj").val("");
                $("#cont").val("");
                measureTooltipElement.className = 'tooltip tooltip-static';
                measureTooltip.setOffset([0, -7]);
                
                sketch = null;
                
                measureTooltipElement = null;
                createMeasureTooltip();
                ol.Observable.unByKey(listener);
                

            }, this);


    }



    function createHelpTooltip() {
        if (helpTooltipElement) {
            helpTooltipElement.parentNode.removeChild(helpTooltipElement);
        }
        helpTooltipElement = document.createElement('div');
        helpTooltipElement.className = 'tooltip hidden';
        helpTooltip = new ol.Overlay({
            element: helpTooltipElement,
            offset: [15, 0],
            positioning: 'center-left'
        });
        
            map.addOverlay(helpTooltip); //커서에 달린 도움말

        
    }

    var setId;


    function createMeasureTooltip() {
        if (measureTooltipElement) {
            measureTooltipElement.parentNode.removeChild(measureTooltipElement);
        }
        measureTooltipElement = document.createElement('div');
        measureTooltipElement.className = 'tooltip tooltip-measure';
        setId =  Math.random();
        measureTooltip = new ol.Overlay({
            id:setId,
            element: measureTooltipElement,
            offset: [0, -15],
            positioning: 'bottom-center'
        });
        
            map.addOverlay(measureTooltip); //넓이와 길이
        

    }
    /*mkSelect.onchange = function(){
        console.log(mkSelect.value);
        var showmarker='';
        mksrc=mkSelect.value
        showmarker += "<img src="+mksrc+" />";
        $('#showmarker').html(showmarker);


        map.removeInteraction(draw);
        map.getInteractions().getArray().forEach(function (i) {
            if (i.get("이벤트") == "선택") {
                map.removeInteraction(i);
                    
                
            }
        })
        addInteraction();
    }*/
    typeSelect.onchange = function () {
        console.log(typeSelect.value);
        map.removeInteraction(draw);
        map.getInteractions().getArray().forEach(function (i) {
            if (i.get("이벤트") == "선택") {
                map.removeInteraction(i);
                    
                
            }
        })
        addInteraction();
    };

    addInteraction();
}
// -----------지도2번 마우스핸들러---------------//
function mapControl2(map){
    
    
    function pointerMoveHandler(event){
        
        
        var features = map.getFeaturesAtPixel(event.pixel);
        if (!features) {
                // 마우스 위치에 어떠한 Feature도 없음
            return;
            }
            // 마우스 포인터 위치에 존재하는 Feature 중 첫번째(features[0])
        var properties = features[0].getProperties();  
            // properties 객체가 object 타입의 Feature에 대한 속성값임
            
            
        }
        
        
        var sketch;
        var helpTooltipElement;
        var helpTooltip;
        var measureTooltipElement;
        var measureTooltip;
        var continuePolygonMsg = 'polygon을 그리는 중입니다.';
        var continueLineMsg = 'Line을 그리는 중입니다.';

            
        var pointerMoveHandler = function (evt) {
            if (evt.dragging) {
                return;
                }
                  
            var helpMsg ='지도를 이동하세요.';

            if (sketch) {
                var geom = (sketch.getGeometry());
            if (geom instanceof ol.geom.Polygon) {
                helpMsg = continuePolygonMsg;
            }else if (geom instanceof ol.geom.LineString) {
                helpMsg = continueLineMsg;
                }
            }
            helpTooltipElement.innerHTML = helpMsg;
            helpTooltip.setPosition(evt.coordinate);

            helpTooltipElement.classList.remove('hidden');

                
            };
    var typeSelect = document.getElementById('type2');
    
        
        


    var draw; 


    var formatLength = function (line) {
        
        var length = ol.sphere.getLength(line);
        var output;
        if (length > 100) {
            output = (Math.round(length / 1000 * 100) / 100) +
                ' ' + 'km';
        } else {
            output = (Math.round(length * 100) / 100) +
                ' ' + 'm';
        }
        return output;
    };


    var formatArea = function (polygon) {
        var area = ol.sphere.getArea(polygon);
        var output;
        if (area > 10000) {
            output = (Math.round(area / 1000000 * 100) / 100) +
                ' ' + 'km<sup>2</sup>';
        } else {
            output = (Math.round(area * 100) / 100) +
                ' ' + 'm<sup>2</sup>';
        }
        return output;
    };


            
    helpTooltip = new ol.Overlay({
            element: helpTooltipElement,
            offset: [15, 0],
            positioning: 'center-left'
        });

          
    //포인트 무브
    map.on('pointermove', pointerMoveHandler);
    map.getViewport().addEventListener('mouseout', function () {
        helpTooltipElement.classList.add('hidden');
    });

    

    function addInteraction() {
        var type = '';
        if (typeSelect.value == 'area') {
            type = 'Polygon';
            $("#selectOption2").hide();
            //$("input:radio[name='selcetType']:radio[value='0']").prop('checked', true); // 선택하기  
        } else if (typeSelect.value == 'length') {
            type = 'LineString';
            $("#selectOption2").hide();
            //$("input:radio[name='selcetType']:radio[value='0']").prop('checked', true); // 선택하기  
        } else if (typeSelect.value == 'Circle') {
            type = 'Circle';
        /* }else if (typeSelect.value == 'Point') {
            type = 'Point';
         */   
        } else if (typeSelect.value == 'Select') {
            $("#selectOption2").show();
            var select; 
            
            select = new ol.interaction.Select({
                condition: ol.events.condition.click
            })
            select.set("이벤트", "선택");
            select.on("select", function (evt) {
            
                var length = evt.target.getFeatures().getLength();
                if (length > 0) {
                    var popup_Test ="";
                    subj = evt.target.getFeatures().getArray()[0].get("subj");
                    cont = evt.target.getFeatures().getArray()[0].get("cont");
                    
                    
                    var features = evt.target.getFeatures().getArray();
                    var feature = features[0]
                    var getLayer = select.getLayer(feature); //마커 옵션중 마커를 변경하기위해선 레이어를 계속 추가해야함으로 선택된 feature의 레이어를 찾아야함.
                    
                    
                    var deleteMk = $('input:radio[name="selcetType"]:checked').val();
                    
                    
                    if(deleteMk =='deleteMarker'){
                        var ftId=feature.getId();	//생성된 feautre 아이디를 구함
                        
                        if(ftId !=null){	//search 해서 생성된 마커에는 오버레이가 존재할수 없기때문에 id가 없음
                            var olId=map.getOverlayById(ftId);	//면적넓이와 길이 오버레이를 feautre id로 찾아냄
                            map.getOverlays().getArray().slice(0).forEach(function(measureTooltip) {
                                map.removeOverlay(olId); //해당 feature의 오버레이를 삭제
                            });
                        }

                        getLayer.getSource().removeFeature(feature);//선택된 feautre의 레이어 중 선택된 feature을 삭제

                        
                    }
                    if(deleteMk !='deleteMarker'){
                        if(cont != ''){
                            $('#popupTest').show();
                            $("#popupTest").css("left", "75%");
                        }else if(cont ==''){
                            $('#popupTest').hide();
                        }    
                    }
                    
                    
                    popup_Test += '<p style="float:right;"><a href="#" onclick="javascript:popup_delete();">닫기</a><p>'+subj;
                        $('#popupTest').html(popup_Test);
                        
                    
                }
            })
                map.addInteraction(select);
                return;
        
        }
        
        newSource = new ol.source.Vector({
                id: "sourceId"
                });
                newSource.set("name", "sourceName");

        newVector = new ol.layer.Vector({
                id: "vectorId",
                source: newSource,
                style: new ol.style.Style({
                    
                    fill: new ol.style.Fill({
                    color: 'rgba(52, 0, 0, 0.35)'
                    }),
                    stroke: new ol.style.Stroke({
                    color: '#000',
                    width: 2
                    })
                    /*,image: new ol.style.Icon(({
                    anchor: [0.5, 10],
                    anchorXUnits: 'fraction',
                    anchorYUnits: 'pixels',
                    src: imgsrc
                    }))*/
                })
            });
            

        newVector.set("name", "vectorName");
        newVector.setZIndex(1000);
    
        draw = new ol.interaction.Draw({
            source: newSource,
            type: type,
            style: new ol.style.Style({
                fill: new ol.style.Fill({
                    color: 'rgba(255, 255, 255, 0.2)'
                }),
                stroke: new ol.style.Stroke({
                    color: 'rgba(0, 0, 0, 0.5)',
                    lineDash: [10, 10],
                    width: 5
                })
                /*,image: new ol.style.Circle({
                    radius: 5,
                    stroke: new ol.style.Stroke({
                        color: 'rgba(0, 0, 0, 0.7)'
                    }),
                    fill: new ol.style.Fill({
                        color: 'rgba(255, 255, 255, 0.2)'
                    })
                })*/
            })
        });
        map.addLayer(newVector);
        map.addInteraction(draw);
        

        createMeasureTooltip();
        createHelpTooltip();

        var listener;
        draw.on('drawstart',
            function (evt) {
                
                // set sketch
                sketch = evt.feature;
                
                
                
                
                var tooltipCoord = evt.coordinate;

                listener = sketch.getGeometry().on('change', function (evt) {
                    var geom = evt.target;
                    var output;
                    if (geom instanceof ol.geom.Polygon) {
                        output = formatArea(geom);
                        tooltipCoord = geom.getInteriorPoint().getCoordinates();
                    } else if (geom instanceof ol.geom.LineString) {
                        output = formatLength(geom);
                        tooltipCoord = geom.getLastCoordinate();
                    } else if (geom instanceof ol.geom.Circle) {//거리계산 구현
                        var length = ol.sphere.getDistance(ol.proj.transform(geom.getCenter(), 'EPSG:900913', 'EPSG:3857'), ol.proj.transform(geom.getLastCoordinate(), 'EPSG:900913', 'EPSG:3857'), 6378137)
                        if (length > 100) {
                            output = (Math.round(length / 1000 * 100) / 100) +
                                ' ' + 'km';
                        } else {
                            output = (Math.round(length * 100) / 100) +
                                ' ' + 'm';
                        }
                        tooltipCoord = geom.getLastCoordinate();
                    }
                    measureTooltipElement.innerHTML = output;
                    measureTooltip.setPosition(tooltipCoord);
                });
            }, this);

        draw.on('drawend',
            function (evt) {
                feature = evt.feature;
                var subj = document.getElementById('subj').value
                var cont = document.getElementById('cont').value

                var marker_html="";
                marker_html+= "<span>작업 제목 :"+subj+"<hr>작업 내용 :"+cont+"<span>";
                
                feature.setId(setId);

                feature.set("subj",marker_html);
                feature.set("cont",cont);
                $("#subj").val("");
                $("#cont").val("");
                
                measureTooltipElement.className = 'tooltip tooltip-static';
                measureTooltip.setOffset([0, -7]);
                
                sketch = null;
                
                measureTooltipElement = null;
                createMeasureTooltip();
                ol.Observable.unByKey(listener);
                

            }, this);


    }

    function createHelpTooltip() {
        if (helpTooltipElement) {
            helpTooltipElement.parentNode.removeChild(helpTooltipElement);
        }
        helpTooltipElement = document.createElement('div');
        helpTooltipElement.className = 'tooltip hidden';
        helpTooltip = new ol.Overlay({
            element: helpTooltipElement,
            offset: [15, 0],
            positioning: 'center-left'
        });
        
            map.addOverlay(helpTooltip); //커서에 달린 도움말

        
    }
    var setId;

    function createMeasureTooltip() {
        if (measureTooltipElement) {
            measureTooltipElement.parentNode.removeChild(measureTooltipElement);
        }
        measureTooltipElement = document.createElement('div');
        measureTooltipElement.className = 'tooltip tooltip-measure';
        setId =  Math.random();
        measureTooltip = new ol.Overlay({
            id:setId,
            element: measureTooltipElement,
            offset: [0, -15],
            positioning: 'bottom-center'
        });
        
            map.addOverlay(measureTooltip); //넓이와 길이
        

    }
    /*mkSelect.onchange = function(){
        console.log(mkSelect.value);
        var showmarker='';
        mksrc=mkSelect.value
        showmarker += "<img src="+mksrc+" />";
        $('#showmarker').html(showmarker);


        map.removeInteraction(draw);
        map.getInteractions().getArray().forEach(function (i) {
            if (i.get("이벤트") == "선택") {
                map.removeInteraction(i);
                    
                
            }
        })
        addInteraction();
    }*/
    typeSelect.onchange = function () {
        console.log(typeSelect.value);
        map.removeInteraction(draw);
        map.getInteractions().getArray().forEach(function (i) {
            if (i.get("이벤트") == "선택") {
                map.removeInteraction(i);
                    
                
            }
        })
        addInteraction();
    };

    addInteraction();
}




//---------------로드뷰---------------
function roadview(map){
    // roadviewindex = $('input:checkbox[id="roadview"]:checked').val();
    // $("#type").val("Select").prop("selected", true); //값이 1인 option 선택
    // $("#type2").val("Select").prop("selected", true); //값이 1인 option 선택
    
    //     map.on('click', function(evt) {
    //             var coordinate = evt.coordinate;
            
    //             lon= coordinate[0];
    //             lat= coordinate[1];
    //             "<span>작업 제목 :"+subj+"<hr>작업 내용 :"+cont+"<span>";
                
    //             var tansform = ol.proj.transform([lon,lat], 'EPSG:3857', 'EPSG:4326')// 브이월드 좌표계에서 다음 지도 좌표계로 변환 EPSG:3857=>EPSG:4326
    //             if(roadviewindex !=null){
    //                 var roadview="https://map.kakao.com/link/roadview/"+tansform[1]+","+tansform[0];   // 로드뷰 불러오기
    //                 window.open(roadview, '로드뷰팝업', 'width=500, height=700, scrollbars=yes, resizable=no')
    //                 var roadhtml="";
    //                 roadhtml += "<iframe src=\""+roadview+"\" width=800px height=800px></iframe>";
    //                 console.log(roadhtml);
    //                 $('#road').html(roadhtml);
                    
    //             }
    //         });


    var rvContainer = document.getElementById('road'); //로드뷰를 표시할 div
    var rv = new kakao.maps.Roadview(rvContainer); //로드뷰 객체
    var rvClient = new kakao.maps.RoadviewClient(); //좌표로부터 로드뷰 파노ID를 가져올 로드뷰 helper객체
    
    var roadviewb;
    map.on('click', function(evt) {
        roadviewb = $('input:radio[name="selcetType"]:checked').val();
        var mapb = $('input:checkbox[id="mapb"]:checked').length;
        if(roadviewb =='roadviewOn'){
            $("#map1").css("width", "49%");
            $("#road").css("width","49%");
            $('#road').show();
            map1s.updateSize();
            var coordinate = evt.coordinate;
            var lon = coordinate[0];
            var lat = coordinate[1];
            var transform = ol.proj.transform([lon, lat], 'EPSG:3857', 'EPSG:4326')
            var position = new kakao.maps.LatLng(transform[1], transform[0]);

            rvClient.getNearestPanoId(position, 50, function(panoId) {
                if (panoId != null) {
                    rv.setPanoId(panoId, position); //panoId와 중심좌표를 통해 로드뷰 실행
                }
            });
        }else{
            $("#map1").css("width", "90%");
            $("#road").css("width","0%");
            $('#road').hide();
            if(mapb != 0){
                $("#map1").css("width", "48%");
                $("#map2").css("width", "48%");
            }
            map1s.updateSize();
            
        }
    })
    
    
    var roadmarkerSource;
    var roadmarkerLayer;
    kakao.maps.event.addListener(rv, 'position_changed', function () {
        roadviewb = $('input:radio[name="selcetType"]:checked').val();
        if(roadviewb =='roadviewOn'){
            var position = rv.getPosition();
            console.log('position : ', position);
            var transform = ol.proj.transform([position.getLng(), position.getLat()], 'EPSG:4326', 'EPSG:3857');
            map1s.getView().setCenter([transform[0],transform[1]]); 
            map1s.getView().setZoom(17);
            //오픈레이어스 지도 위치 이동
            console.log(roadmarkerSource);
            if(roadmarkerSource !=null){ //두번째 검색시 이전 검색의 소스와 마커 스타일 초기화
                roadmarkerLayer.getSource().clear();
            }
            var roadMarker = new ol.Feature({
                geometry: new ol.geom.Point([transform[0], [transform[1]]])
            });
            
            var markerStyle = new ol.style.Style({
                image: new ol.style.Icon({
                    anchor: [0.5, 0.5],
                    scale: 0.3,
                    src: "/images/egovframework/example/car1.png"
                })
            });
            setId =  Math.random();
            console.log(setId);
            roadMarker.setStyle(markerStyle);
            roadMarker.setId(setId);
            roadMarker.set("cont",'123');
        
            roadmarkerSource = new ol.source.Vector({
                features: [roadMarker]
            });
        
            roadmarkerLayer = new ol.layer.Vector({
                source: roadmarkerSource,
            });
            
            map1s.addLayer(roadmarkerLayer);
        }
    });
}

/*function roadview(){
    roadviewindex = $('input:checkbox[id="roadview"]:checked').val();
    console.log(roadviewindex);
    
        map1s.on('click', function(evt) {
                var coordinate = evt.coordinate;
            
                lon= coordinate[0];
                lat= coordinate[1];
                
                var tansform = ol.proj.transform([lon,lat], 'EPSG:3857', 'EPSG:4326')// 브이월드 좌표계에서 다음 지도 좌표계로 변환 EPSG:3857=>EPSG:4326
                if(roadviewindex !=null){
                    var roadview="https://map.kakao.com/link/roadview/"+tansform[1]+","+tansform[0];   // 로드뷰 불러오기
                    window.open(roadview, '로드뷰팝업', 'width=500, height=700, scrollbars=yes, resizable=no')
                }
            });
        map2s.on('click', function(evt2) {
                var coordinate = evt2.coordinate;
            
                lon2= coordinate[0];
                lat2= coordinate[1];
                
                var tansform2 = ol.proj.transform([lon2,lat2], 'EPSG:3857', 'EPSG:4326')// 브이월드 좌표계에서 다음 지도 좌표계로 변환 EPSG:3857=>EPSG:4326
                if(roadviewindex !=null){
                    var roadview2="https://map.kakao.com/link/roadview/"+tansform2[1]+","+tansform2[0];   // 로드뷰 불러오기
                    window.open(roadview2, '로드뷰팝업', 'width=500, height=700, scrollbars=yes, resizable=no')
                }
            });
    
}*/

    
    

//search 함수

var markerSource;
var markerSource_2;
var markerLayer
var markerLayer_2

//버튼 체크를 확인하기위함.
var map1b;
var map2b;

function searchIndex(map1){
    map1s=map1;
}
function searchIndex2(map2){
    map2s=map2;
}

var search = function(){
    map2b = $('input:checkbox[id="map2b"]:checked').val(); 
    map1b = $('input:checkbox[id="map1b"]:checked').val(); 
    
    var imgsrc = $('input:radio[name="searchMk"]:checked').val();
    if(map1b!=null){
        if(markerSource==null){	// 첫 검색시 소스 생성
                markerSource = new ol.source.Vector();
            }else if(markerSource !=null){ //두번째 검색시 이전 검색의 소스와 마커 스타일 초기화
                markerLayer.getSource().clear();
                markerLayer.setStyle();
            }
        if(markerSource2 != null){	//이전 검색시 이동하여 생성한 마커삭제]
            markerLayer2.getSource().clear();
                    
        }
    }
    if(map2b !=null){
        if(markerSource_2==null){    
            markerSource_2 = new ol.source.Vector();
            }else if(markerSource_2 !=null){
                markerLayer_2.getSource().clear();
                markerLayer_2.setStyle();
            }
        
        if(markerSource2_2 != null){
            markerLayer2_2.getSource().clear();
            }
        }
            
            
    if(map1b !=null){
        markerSource.set("name","마커레이어");
        }
    if(map2b !=null){
        markerSource_2.set("name","마커레이어");
        }
    
        //style을 활용해서, point의 style을 변경한다.
            var markerStyle = new ol.style.Style({
                    image: new ol.style.Icon({ //마커 이미지
                        opacity: 1, //투명도 1=100% 
                        scale: 1, //크기 1=100%
                        src: imgsrc //marker 이미지, 해당 point를 marker로 변경한다.
                        }),
                    zindex: 1001
                });
               
    		$.ajax({
    			type: "get",
    			url: "https://api.vworld.kr/req/search",
    			data : $('#searchForm').serialize(),
    			dataType: 'jsonp',
    			async: false,
    			success: function(data) {
    				var features = new Array();
    				if(data.response.status =="NOT_FOUND"){
    					alert("검색결과가 없습니다.");
    				}else{
    					$('p.notice').show();
    					var result_html ="";
                        
    					
    					for(var o in data.response.result.items){ 
                            var marker_html ="";
                            if(o==0){
                                console.log(map2b);
                            	if(map1b !=null){
                            		map1s.getView().setCenter([data.response.result.items[o].point.x*1, data.response.result.items[o].point.y*1 ]); 
                				    map1s.getView().setZoom(17); 
                            	}
                                if(map2b !=null){
                            		map2s.getView().setCenter([data.response.result.items[o].point.x*1, data.response.result.items[o].point.y*1 ]); // 지도 이동
                				    map2s.getView().setZoom(17); // 줌레벨 설정
                            	}
    						
                            	
    					}
    					
    						
                            var x = data.response.result.items[o].point.x*1;
                            var y = data.response.result.items[o].point.y*1
                            var point_feature = new ol.Feature({
                                geometry: new ol.geom.Point([x, y]).transform('EPSG:900913', 'EPSG:3857')
                            });
                            
                            var title = data.response.result.items[o].address.bldnm
                            var cont = "2";  //내용이없을경우 팝업 제외하기위하여 추가 검색시 생성되는 마커는 모두 내용이 있음으로 cont 내용을 추가함
    						var contents = data.response.result.items[o].address.road
                            marker_html += "<span> 장소 :"+title+"<hr>도로명 :"+ contents+"</span>";
                            point_feature.set("subj",marker_html);
                            point_feature.set("cont",cont);


                                //markerSource에 등록한 point를 담는다. addFeature를 이용해서, 여러개의 point를 source에 담는다.
                                if(map1b !=null){
                                    markerSource.addFeature(point_feature);
                                // 마커 레이어 생성
                                    markerLayer = new ol.layer.Vector({
                                        source: markerSource, //마커 feacture들
                                        style: markerStyle //마커 스타일
                                    });
                                }
                                if(map2b !=null){
                                    markerSource_2.addFeature(point_feature);
                                    // 마커 레이어 생성
                                    markerLayer_2 = new ol.layer.Vector({
                                        source: markerSource_2, //마커 feacture들
                                        style: markerStyle //마커 스타일
                                    });
                                }
                                
                                
                          var roadText=escape(data.response.result.items[o].address.road);
                          var bldnmText=escape(data.response.result.items[o].address.bldnm);
                         
                                result_html += "<hr><li><p onclick='move("+data.response.result.items[o].point.x+","+
                                		data.response.result.items[o].point.y+
                                		","+"\""+roadText+"\","+"\""+bldnmText+"\""+
    							")'> 도로명: "+ data.response.result.items[o].address.road +
    							" 지번: "+ data.response.result.items[o].address.parcel +"  </p></li>";
    							
    					}
    					
                        if(map1b !=null){
    					    map1s.addLayer(markerLayer);
                        }
                        if(map2b !=null){
                            map2s.addLayer(markerLayer_2);
                        }

    					$('#result_ajax').html(result_html);  //result_ajax 라는 id 값이 있는곳의 html을 수정한다 
    					$('#result_count').text(data.response.record.total+"건이 검색되었습니다.");
    					alert(data.response.record.total+"건이 검색되었습니다.");
    				}
    				
    				
    			},
    			complete:function(){
    				
    			},
    			error: function(xhr, stat, err) {}
    		});
    		
    	}



        var markerSource2; //검색시 생성되는 마커
        var markerSource2_2; //이동시 생성되는 마커
        var searchMarker; //검색시 생성되는 마커 제어(move 함수 실행시 검색시 생성된 마커를 제어.)
        var move = function(x,y,roadText,bldnmText){
            map2b = $('input:checkbox[id="map2b"]:checked').val(); 
            map1b = $('input:checkbox[id="map1b"]:checked').val(); 
            searchMarker = $('input:checkbox[id="searchMarker"]:checked').val();
            var road=unescape(roadText);
            var bldnm=unescape(bldnmText);
            var markerStyle2 = new ol.style.Style({                
                image: new ol.style.Icon({ //마커 이미지
                    opacity: 1, //투명도 1=100% 
                    scale: 1, //크기 1=100%
                    //marker 이미지, 해당 point를 marker로 변경한다.
                    src: 'https://openlayers.org/en/v3.20.1/examples/data/icon.png'                        
                    }),
                    
                    zindex: 1001
                });
            var point_feature2 = new ol.Feature({
                geometry: new ol.geom.Point([x, y]).transform('EPSG:900913', 'EPSG:3857')
            });
            var marker_html="";
            marker_html += "<span> 장소 :"+bldnm+"<hr>도로명 :"+ road+"</span>";
            var cont = "2";  //내용이없을경우 팝업 제외하기위하여 추가 검색시 생성되는 마커는 모두 내용이 있음으로 cont 내용을 추가함
                
            point_feature2.set("subj",marker_html);
            point_feature2.set("cont",cont);    
                
            if(map1b !=null){
                
                map1s.getView().setCenter([ x, y ]); // 지도 이동
                map1s.getView().setZoom(17); // 줌레벨 설정
                
                if(markerSource==null){
                    markerSource = new ol.source.Vector();
        
                }else if(markerSource !=null){
                    if(searchMarker != null){   //검색결과시 생성된 마커 숨김, 이동시 마커는 생성
                        //markerLayer.getSource().clear();
                        markerLayer.setVisible(false);
                    }else if(searchMarker == null){
                        markerLayer.setVisible(true);
                    }
                    
                }
                if(markerSource2==null){
                    markerSource2 = new ol.source.Vector();
                    
                }else if(markerSource2 != null){
                    markerLayer2.getSource().clear();
                }
                markerSource2.set("name","마커레이어");
                
        
                //markerSource에 등록한 point를 담는다. addFeature를 이용해서, 여러개의 point를 source에 담는다.
                markerSource2.addFeature(point_feature2);
                        
                // 마커 레이어 생성
                markerLayer2 = new ol.layer.Vector({
                    source: markerSource2, //마커 feacture들
                    style: markerStyle2 //마커 스타일
                    });
                 
                map1s.addLayer(markerLayer2);
    
            }
            if(map2b !=null){
                map2s.getView().setCenter([ x, y ]); // 지도 이동
                map2s.getView().setZoom(17); // 줌레벨 설정
                
                if(markerSource_2==null){
                    markerSource = new ol.source.Vector();
                    
                }else if(markerSource_2 !=null){
                    //markerLayer_2.getSource().clear(); //검색결과시 생성된 마커삭제
                    if(searchMarker != null){   //검색결과시 생성된 마커 숨김, 이동시 마커는 생성
                        //markerLayer.getSource().clear();
                        markerLayer.setVisible(false);
                    }else if(searchMarker == null){
                        markerLayer.setVisible(true);
                    }
                }
                if(markerSource2_2==null){
                    markerSource2_2 = new ol.source.Vector(); //이동하는 곳에 마커 생성
                }else if(markerSource2_2 != null){
                    markerLayer2_2.getSource().clear();   //이동했던 곳에 마커 삭제
                }
                markerSource2_2.set("name","마커레이어");
            
                //markerSource에 등록한 point를 담는다. addFeature를 이용해서, 여러개의 point를 source에 담는다.
                markerSource2_2.addFeature(point_feature2);
                        
                // 마커 레이어 생성
                markerLayer2_2 = new ol.layer.Vector({
                    source: markerSource2_2, //마커 feacture들
                    style: markerStyle2 //마커 스타일
                    });
                 
                map2s.addLayer(markerLayer2_2);
            }
            
        }
        //생성된 팝업 닫기
        function popup_delete(){
            $('#popupTest').hide();
        }
        function map1optionShow(){
            $('#map1option').show();
        }
        function map2optionShow(){
            $('#map2option').show();
        }
        function map1optionHide(){
            $('#map1option').hide();
        }
        function map2optionHide(){
            $('#map2option').hide();
        }
        
        //지도 기능 전체 삭제
        function map1_delete(){
            map1s.getLayers().forEach(layer => layer.getSource().refresh());
            map1s.getOverlays().getArray().slice(0).forEach(function(MeasureTooltip) {
                map1s.removeOverlay(MeasureTooltip);
                });
        }
        function map2_delete(){
            map2s.getLayers().forEach(layer => layer.getSource().refresh());
            map2s.getOverlays().getArray().slice(0).forEach(function(MeasureTooltip) {
                map2s.removeOverlay(MeasureTooltip);
                });
        }
        function all_delete(){
            map1s.getLayers().forEach(layer => layer.getSource().refresh());
            map1s.getOverlays().getArray().slice(0).forEach(function(MeasureTooltip) {
                map1.removeOverlay(MeasureTooltip);
                });
            
            map2s.getLayers().forEach(layer => layer.getSource().refresh());
            map2s.getOverlays().getArray().slice(0).forEach(function(MeasureTooltip) {
                map2.removeOverlay(MeasureTooltip);
                });
        }